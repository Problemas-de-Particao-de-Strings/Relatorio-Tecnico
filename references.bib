
@article{xin_chen_assignment_2005,
	title = {Assignment of Orthologous Genes via Genome Rearrangement},
	volume = {2},
	issn = {1545-5963},
	url = {http://ieeexplore.ieee.org/document/1541983/},
	doi = {10.1109/TCBB.2005.48},
	abstract = {The assignment of orthologous genes between a pair of genomes is a fundamental and challenging problem in comparative genomics. Existing methods that assign orthologs based on the similarity between {DNA} or protein sequences may make erroneous assignments when sequence similarity does not clearly delineate the evolutionary relationship among genes of the same families. In this paper, we present a new approach to ortholog assignment that takes into account both sequence similarity and evolutionary events at a genome level, where orthologous genes are assumed to correspond to each other in the most parsimonious evolving scenario under genome rearrangement. First, the problem is formulated as that of computing the signed reversal distance with duplicates between the two genomes of interest. Then, the problem is decomposed into two new optimization problems, called minimum common partition and maximum cycle decomposition, for which efficient heuristic algorithms are given. Following this approach, we have implemented a highthroughput system for assigning orthologs on a genome scale, called {SOAR}, and tested it on both simulated data and real genome sequence data. Compared to a recent ortholog assignment method based entirely on homology search (called {INPARANOID}), {SOAR} shows a marginally better performance in terms of sensitivity on the real data set because it is able to identify several correct orthologous pairs that are missed by {INPARANOID}. The simulation results demonstrate that {SOAR}, in general, performs better than the iterated exemplar algorithm in terms of computing the reversal distance and assigning correct orthologs.},
	pages = {302--315},
	number = {4},
	journaltitle = {{IEEE}/{ACM} Transactions on Computational Biology and Bioinformatics},
	shortjournal = {{IEEE}/{ACM} Trans. Comput. Biol. and Bioinf.},
	author = {{Xin Chen} and {Jie Zheng} and {Zheng Fu} and {Peng Nan} and {Yang Zhong} and Lonardi, S. and {Tao Jiang}},
	urldate = {2023-11-11},
	date = {2005-10},
	langid = {english},
	note = {Publisher: Institute of Electrical and Electronics Engineers ({IEEE})},
}

@article{kolman_approximating_2007,
	title = {Approximating reversal distance for strings with bounded number of duplicates},
	volume = {155},
	issn = {0166218X},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0166218X0600309X},
	doi = {10.1016/j.dam.2006.05.011},
	abstract = {For a string A=a1 . . . an, a reversal  (i, j ), 1   i   j   n, transforms the string A into a string A′=a1 . . . ai−1aj aj−1 . . . ai aj+1 . . . an, that is, the reversal  (i, j ) reverses the order of symbols in the substring ai . . . aj of A. In the case of signed strings, where each symbol is given a sign + or −, the reversal operation also ﬂips the sign of each symbol in the reversed substring. Given two strings, A and B, signed or unsigned, sorting by reversals ({SBR}) is the problem of ﬁnding the minimum number of reversals that transform the string A into the string B.},
	pages = {327--336},
	number = {3},
	journaltitle = {Discrete Applied Mathematics},
	shortjournal = {Discrete Applied Mathematics},
	author = {Kolman, Petr and Waleń, Tomasz},
	urldate = {2023-11-11},
	date = {2007-02},
	langid = {english},
	note = {Publisher: Elsevier {BV}},
}

@article{siqueira_approximation_2021,
	title = {Approximation algorithm for rearrangement distances considering repeated genes and intergenic regions},
	volume = {16},
	issn = {1748-7188},
	url = {https://almob.biomedcentral.com/articles/10.1186/s13015-021-00200-w},
	doi = {10.1186/s13015-021-00200-w},
	abstract = {The rearrangement distance is a method to compare genomes of different species. Such distance is the number of rearrangement events necessary to transform one genome into another. Two commonly studied events are the transposition, which exchanges two consecutive blocks of the genome, and the reversal, which reverts a block of the genome. When dealing with such problems, seminal works represented genomes as sequences of genes without repetition. More realistic models started to consider gene repetition or the presence of intergenic regions, sequences of nucleotides between genes and in the extremities of the genome. This work explores the transposition and reversal events applied in a genome representation considering both gene repetition and intergenic regions. We define two problems called Minimum Common Intergenic String Partition and Reverse Minimum Common Intergenic String Partition. Using a relation with these two problems, we show a �(k)-approximation for the Intergenic Transposition Distance, the Intergenic Reversal Distance, and the Intergenic Reversal and Transposition Distance problems, where k is the maximum number of copies of a gene in the genomes. Our practical experiments on simulated genomes show that the use of partitions improves the estimates for the distances.},
	pages = {21},
	number = {1},
	journaltitle = {Algorithms for Molecular Biology},
	shortjournal = {Algorithms Mol Biol},
	author = {Siqueira, Gabriel and Alexandrino, Alexsandro Oliveira and Oliveira, Andre Rodrigues and Dias, Zanoni},
	urldate = {2023-11-11},
	date = {2021-12},
	langid = {english},
	note = {Publisher: Springer Science and Business Media {LLC}},
}

@inproceedings{kolman_reversal_2007,
	location = {Berlin, Heidelberg},
	title = {Reversal Distance for Strings with Duplicates: Linear Time Approximation using Hitting Set},
	volume = {4368},
	isbn = {3-540-69513-3},
	url = {https://doi.org/10.1007/11970125_22},
	doi = {10.1007/11970125_22},
	series = {Lecture Notes in Computer Science},
	abstract = {In the last decade there has been an ongoing interest in string comparison problems; to a large extend the interest was stimulated by genome rearrangement problems in computational biology but related problems appear in many other areas of computer science. Particular attention has been given to the problem of sorting by reversals ({SBR}): given two strings, A and B, ﬁnd the minimum number of reversals that transform the string A into the string B (a reversal ρ(i, j), i {\textless} j, transforms a string A = a1 . . . an into a string A′ = a1 . . . ai−1ajaj−1 . . . aiaj+1 . . . an). Closely related is the minimum common string partition problem ({MCSP}): given two strings, A and B, ﬁnd a minimum size partition of A into substrings P1, . . . , Pl (i.e., A = P1 . . . Pl) and a partition of B into substrings Q1, . . . , Ql such that (Q1, . . . , Ql) is a permutation of (P1, . . . , Pl).},
	pages = {279--289},
	booktitle = {Proceedings of the 4th International Workshop on Approximation and Online Algorithms ({WAOA}'2006)},
	publisher = {Springer-Verlag},
	author = {Kolman, Petr and Walen, Tomasz},
	date = {2007},
	langid = {english},
}

@inproceedings{goldstein_minimum_2005,
	location = {Berlin, Heidelberg},
	title = {Minimum Common String Partition Problem: Hardness and Approximations},
	isbn = {978-3-540-30551-4},
	doi = {10.1007/978-3-540-30551-4_43},
	abstract = {String comparison is a fundamental problem in computer science, with applications in areas such as computational biology, text processing or compression. In this paper we address the minimum common string partition problem, a string comparison problem with tight connection to the problem of sorting by reversals with duplicates, a key problem in genome rearrangement.},
	pages = {484--495},
	booktitle = {Proceedings of the 15th International Symposium on Algorithms and Computation ({ISAAC}'2004)},
	publisher = {Springer Berlin Heidelberg},
	author = {Goldstein, Avraham and Kolman, Petr and Zheng, Jie},
	date = {2005},
	langid = {english},
}

@article{blum_minimum_2020,
	title = {Minimum common string partition: on solving large‐scale problem instances},
	volume = {27},
	issn = {0969-6016, 1475-3995},
	url = {https://onlinelibrary.wiley.com/doi/10.1111/itor.12603},
	doi = {10.1111/itor.12603},
	shorttitle = {Minimum common string partition},
	abstract = {Minimum common string partition is an {NP}-hard combinatorial optimization problem from the bioinformatics ﬁeld. The current state-of-the-art algorithm is a hybrid technique known as construct, merge, solve, and adapt ({CMSA}). This algorithm combines two main algorithmic components: generating solutions in a probabilistic way and solving reduced subinstances obtained from the tackled problem instances, if possible, to optimality. However, the {CMSA} algorithm was not intended for application to very large problem instances. Therefore, in this paper we present a technique that makes {CMSA}, and other available algorithms for this problem, applicable to problem instances that are about one order of magnitude larger than the largest problem instances considered so far. Moreover, a reduced variable neighborhood search ({RVNS}) for solving the tackled problem, based on integer programming, is introduced. The experimental results show that the modiﬁed {CMSA} algorithm is very strong for problem instances based on rather small alphabets. With growing alphabet size, it turns out that {RVNS} has a growing advantage over {CMSA}.},
	pages = {91--111},
	number = {1},
	journaltitle = {International Transactions in Operational Research},
	shortjournal = {Int Trans Operational Res},
	author = {Blum, Christian},
	urldate = {2023-11-11},
	date = {2020-01},
	langid = {english},
}

@misc{ferdous_solving_2014,
	title = {Solving the Minimum Common String Partition Problem with the Help of Ants},
	url = {http://arxiv.org/abs/1401.4539},
	abstract = {In this paper, we consider the problem of ﬁnding a minimum common partition of two strings. The problem has its application in genome comparison. As it is an {NP}-hard, discrete combinatorial optimization problem, we employ a metaheuristic technique, namely, {MAX}-{MIN} ant system to solve this problem. To achieve better eﬃciency we ﬁrst map the problem instance into a special kind of graph. Subsequently, we employ a {MAX}-{MIN} ant system to achieve high quality solutions for the problem. Experimental results show the superiority of our algorithm in comparison with the state of art algorithm in the literature. The improvement achieved is also justiﬁed by standard statistical test.},
	number = {{arXiv}:1401.4539},
	publisher = {{arXiv}},
	author = {Ferdous, S. M. and Rahman, M. Sohel},
	urldate = {2023-11-11},
	date = {2014-05-21},
	langid = {english},
	eprinttype = {arxiv},
	eprint = {1401.4539 [cs]},
	keywords = {Computer Science - Artificial Intelligence},
}

@article{blum_construct_2016,
	title = {Construct, Merge, Solve \& Adapt A new general algorithm for combinatorial optimization},
	volume = {68},
	issn = {03050548},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0305054815002452},
	doi = {10.1016/j.cor.2015.10.014},
	abstract = {This paper describes a general hybrid metaheuristic for combinatorial optimization labelled Construct, Merge, Solve \& Adapt. The proposed algorithm is a speciﬁc instantiation of a framework known from the literature as Generate-And-Solve, which is based on the following general idea. First, generate a reduced sub-instance of the original problem instance, in a way such that a solution to the sub-instance is also a solution to the original problem instance. Second, apply an exact solver to the reduced sub-instance in order to obtain a (possibly) high quality solution to the original problem instance. And third, make use of the results of the exact solver as feedback for the next algorithm iteration. The minimum common string partition problem and the minimum covering arborescence problem are chosen as test cases in order to demonstrate the application of the proposed algorithm. The obtained results show that the algorithm is competitive with the exact solver for small to medium size problem instances, while it signiﬁcantly outperforms the exact solver for larger problem instances.},
	pages = {75--88},
	journaltitle = {Computers \& Operations Research},
	shortjournal = {Computers \& Operations Research},
	author = {Blum, Christian and Pinacho, Pedro and López-Ibáñez, Manuel and Lozano, José A.},
	urldate = {2023-11-11},
	date = {2016-04},
	langid = {english},
}

@article{blum_computational_2016,
	title = {Computational performance evaluation of two integer linear programming models for the minimum common string partition problem},
	volume = {10},
	issn = {1862-4472, 1862-4480},
	url = {http://link.springer.com/10.1007/s11590-015-0921-4},
	doi = {10.1007/s11590-015-0921-4},
	abstract = {In the minimum common string partition ({MCSP}) problem two related input strings are given. “Related” refers to the property that both strings consist of the same set of letters appearing the same number of times in each of the two strings. The {MCSP} seeks a minimum cardinality partitioning of one string into non-overlapping substrings that is also a valid partitioning for the second string. This problem has applications in bioinformatics e.g. in analyzing related {DNA} or protein sequences. For strings with lengths less than about 1000 letters, a previously published integer linear programming ({ILP}) formulation yields, when solved with a state-of-the-art solver such as {CPLEX}, satisfactory results. In this work, we propose a new, alternative {ILP} model that is compared to the former one. While a polyhedral study shows the linear programming relaxations of the two models to be equally strong, a comprehensive experimental comparison using real-world as well as artiﬁcially created benchmark instances indicates substantial computational advantages of the new formulation.},
	pages = {189--205},
	number = {1},
	journaltitle = {Optimization Letters},
	shortjournal = {Optim Lett},
	author = {Blum, Christian and Raidl, Günther R.},
	urldate = {2023-11-11},
	date = {2016-01},
	langid = {english},
}

@article{blum_mathematical_2015,
	title = {Mathematical programming strategies for solving the minimum common string partition problem},
	volume = {242},
	issn = {03772217},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0377221714008716},
	doi = {10.1016/j.ejor.2014.10.049},
	abstract = {The minimum common string partition problem is an {NP}-hard combinatorial optimization problem with applications in computational biology. In this work we propose the ﬁrst integer linear programming model for solving this problem. Moreover, on the basis of the integer linear programming model we develop a deterministic 2-phase heuristic which is applicable to larger problem instances. The results show that provenly optimal solutions can be obtained for problem instances of small and medium size from the literature by solving the proposed integer linear programming model with {CPLEX}. Furthermore, new best-known solutions are obtained for all considered problem instances from the literature. Concerning the heuristic, we were able to show that it outperforms heuristic competitors from the related literature.},
	pages = {769--777},
	number = {3},
	journaltitle = {European Journal of Operational Research},
	shortjournal = {European Journal of Operational Research},
	author = {Blum, Christian and Lozano, José A. and Davidson, Pinacho},
	urldate = {2023-11-11},
	date = {2015-05},
	langid = {english},
}

@article{goldstein_quick_2014,
	title = {Quick greedy computation for minimum common string partition},
	volume = {542},
	issn = {03043975},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0304397514003557},
	doi = {10.1016/j.tcs.2014.05.006},
	pages = {98--107},
	journaltitle = {Theoretical Computer Science},
	shortjournal = {Theoretical Computer Science},
	author = {Goldstein, Isaac and Lewenstein, Moshe},
	urldate = {2023-11-11},
	date = {2014-07},
	langid = {english},
}

@misc{bulteau_minimum_2013,
	title = {Minimum Common String Partition Parameterized by Partition Size is Fixed-Parameter Tractable},
	url = {http://arxiv.org/abs/1305.0649},
	abstract = {The {NP}-hard Minimum Common String Partition problem asks whether two strings x and y can each be partitioned into at most k substrings such that both partitions use exactly the same substrings in a diﬀerent order. We present the ﬁrst ﬁxed-parameter algorithm for Minimum Common String Partition using only parameter k.},
	number = {{arXiv}:1305.0649},
	publisher = {{arXiv}},
	author = {Bulteau, Laurent and Komusiewicz, Christian},
	urldate = {2023-11-11},
	date = {2013-10-28},
	langid = {english},
	eprinttype = {arxiv},
	eprint = {1305.0649 [cs]},
	keywords = {Computer Science - Data Structures and Algorithms},
}

@misc{bulteau_fixed-parameter_2013,
	title = {A Fixed-Parameter Algorithm for Minimum Common String Partition with Few Duplications},
	url = {http://arxiv.org/abs/1307.7842},
	abstract = {Motivated by the study of genome rearrangements, the {NPhard} Minimum Common String Partition problems asks, given two strings, to split both strings into an identical set of blocks. We consider an extension of this problem to unbalanced strings, so that some elements may not be covered by any block. We present an eﬃcient ﬁxed-parameter algorithm for the parameters number k of blocks and maximum occurrence d of a letter in either string. We then evaluate this algorithm on bacteria genomes and synthetic data.},
	number = {{arXiv}:1307.7842},
	publisher = {{arXiv}},
	author = {Bulteau, Laurent and Fertin, Guillaume and Komusiewicz, Christian and Rusu, Irena},
	urldate = {2023-11-11},
	date = {2013-07-30},
	langid = {english},
	eprinttype = {arxiv},
	eprint = {1307.7842 [cs, q-bio]},
	keywords = {Computer Science - Computational Engineering, Finance, and Science, Computer Science - Data Structures and Algorithms, Quantitative Biology - Quantitative Methods},
}

@article{jiang_minimum_2012,
	title = {Minimum common string partition revisited},
	volume = {23},
	issn = {1382-6905, 1573-2886},
	url = {http://link.springer.com/10.1007/s10878-010-9370-2},
	doi = {10.1007/s10878-010-9370-2},
	abstract = {Minimum Common String Partition ({MCSP}) has drawn much attention due to its application in genome rearrangement. In this paper, we investigate three variants of {MCSP}: {MCSPc}, which requires that there are at most c elements in the alphabet; d-{MCSP}, which requires the occurrence of each element to be bounded by d; and x-balanced {MCSP}, which requires the length of blocks being in range (n/k −x, n/k +x), where n is the length of the input strings, k is the number of blocks in the optimal common partition and x is a constant integer. We show that {MCSPc} is {NP}-hard when c ≥ 2. As for d-{MCSP}, we present an {FPT} algorithm which runs in O∗((d!)2k) time. As it is still unknown whether an {FPT} algorithm only parameterized on k exists for the general case of {MCSP}, we also devise an {FPT} algorithm for the special case x-balanced {MCSP} parameterized on both k and x.},
	pages = {519--527},
	number = {4},
	journaltitle = {Journal of Combinatorial Optimization},
	shortjournal = {J Comb Optim},
	author = {Jiang, Haitao and Zhu, Binhai and Zhu, Daming and Zhu, Hong},
	urldate = {2023-11-11},
	date = {2012-05},
	langid = {english},
}

@incollection{mandoiu_novel_2007,
	location = {Berlin, Heidelberg},
	title = {A Novel Greedy Algorithm for the Minimum Common String Partition Problem},
	volume = {4463},
	isbn = {978-3-540-72030-0 978-3-540-72031-7},
	url = {http://link.springer.com/10.1007/978-3-540-72031-7_40},
	abstract = {The Minimum Common String Partition problem ({MCSP}) is to partition two given input strings into the same collection of substrings, where the number of substrings in the partition is minimized. This problem is a key problem in genome rearrangement, and is closely related to the problem of sorting by reversals with duplicates. {MCSP} is {NP}-hard, even for the most trivial case, 2-{MCSP}, where each letter occurs at most twice in each input string. There are various approximation algorithms which can achieve very good approximation ratios but with complicated implementations, for example, 1.5-approximation algorithm for 2-{MCSP}, 1.1037-approximation algorithm for 2-{MCSP} and a 4-approximation algorithm for 3-{MCSP}. There is also a simple greedy algorithm for {MCSP} which extracts the longest common substring from the given strings at each step. In this paper, we propose a novel greedy algorithm for {MCSP}, where we extract the longest common substring containing a symbol occurring only once at each step whenever there is a such symbol. We show our algorithm is more “worst case” greedy at each step than the greedy algorithm and the expected performance of our algorithm is better than that of the greedy algorithm. Our experiments show that our method achieves a better partition on average than the greedy algorithm does. Another advantage of our algorithm is that it is much faster than the greedy algorithm.},
	pages = {441--452},
	booktitle = {Bioinformatics Research and Applications},
	publisher = {Springer Berlin Heidelberg},
	author = {He, Dan},
	editor = {Măndoiu, Ion and Zelikovsky, Alexander},
	urldate = {2023-11-11},
	date = {2007},
	langid = {english},
	doi = {10.1007/978-3-540-72031-7_40},
	note = {Series Title: Lecture Notes in Computer Science},
}

@article{chrobak_greedy_nodate,
	title = {The Greedy Algorithm for the Minimum Common String Partition Problem},
	abstract = {In the Minimum Common String Partition problem ({MCSP}), we are given two strings on input, and we wish to partition them into the same collection of substrings, minimizing the number of the substrings in the partition. This problem is {NP}-hard, even for a special case, denoted 2-{MCSP}, where each letter occurs at most twice in each input string. We study a greedy algorithm for {MCSP} that at each step extracts a longest common substring from the given strings. We show that the approximation ratio of this algorithm is between  (n0.43) and O(n0.69). In the case of 2-{MCSP}, we show that the approximation ratio is equal to 3. For 4-{MCSP}, we give a lower bound of  (log n).},
	author = {Chrobak, Marek and Kolman, Petr},
	langid = {english},
}

@thesis{siqueira_heuristicas_2021,
	location = {Brasil},
	title = {Heurísticas para Problemas de Rearranjo de Genomas com Genes Multiplicados},
	abstract = {Um dos objetivos dos problemas de rearranjo de genomas consiste em estimar a distância evolutiva entre genomas de diferentes espécies utilizando eventos de rearranjo, mutações capazes de alterar a sequência genética dos genomas. Diferentes problemas de rearranjo podem ser definidos de acordo com os eventos utilizados e as características dos genomas considerados. O objetivo do trabalho foi o desenvolvimento de heurísticas para resolver problemas de rearranjo de genomas considerando genes multiplicados e os eventos de rearranjo de reversão e transposição. Desenvolvemos heurísticas baseadas em técnicas amplamente adotadas para problemas de otimização combinatória, como Busca Local, Algoritmos Genéticos e {GRASP}. Nos testes realizados, verificamos que as distâncias obtidas pelas heurísticas propostas são menores que as distâncias obtidas por algoritmos da literatura.},
	institution = {Instituto de Computação, Universidade Estadual de Campinas},
	type = {mathesis},
	author = {Siqueira, Gabriel},
	urldate = {2023-07-30},
	date = {2021},
	langid = {portuguese},
}

@article{siqueira_signed_2023,
	title = {Signed rearrangement distances considering repeated genes, intergenic regions, and indels},
	volume = {46},
	issn = {1573-2886},
	url = {https://doi.org/10.1007/s10878-023-01083-w},
	doi = {10.1007/s10878-023-01083-w},
	abstract = {Genome rearrangement distance problems allow to estimate the evolutionary distance between genomes. These problems aim to compute the minimum number of mutations called rearrangement events necessary to transform one genome into another. Two commonly studied rearrangements are the reversal, which inverts a sequence of genes, and the transposition, which exchanges two consecutive sequences of genes. Seminal works on this topic focused on the sequence of genes and assumed that each gene occurs exactly once on each genome. More realistic models have been assuming that a gene may have multiple copies or may appear in only one of the genomes. Other models also take into account the nucleotides between consecutive pairs of genes, which are called intergenic regions. This work combines all these generalizations defining the signed intergenic reversal distance ({SIRD}), the signed intergenic reversal and transposition distance ({SIRTD}), the signed intergenic reversal and indels distance ({SIRID}), and the signed intergenic reversal, transposition, and indels distance ({SIRTID}) problems. We show a relation between these problems and the signed minimum common intergenic string partition ({SMCISP}) problem. From such relation, we derive \$\${\textbackslash}{varTheta} (k)\$\$-approximation algorithms for the {SIRD} and the {SIRTD} problems, where k is maximum number of copies of a gene in the genomes. These algorithms also work as heuristics for the {SIRID} and {SIRTID} problems. Additionally, we present some parametrized algorithms for {SMCISP} that ensure constant approximation factors for the distance problems. Our experimental tests on simulated genomes show an improvement on the rearrangement distances with the use of the partition algorithms.},
	pages = {16},
	number = {2},
	journaltitle = {Journal of Combinatorial Optimization},
	shortjournal = {J Comb Optim},
	author = {Siqueira, Gabriel and Alexandrino, Alexsandro Oliveira and Dias, Zanoni},
	urldate = {2023-11-07},
	date = {2023-09-10},
	langid = {english},
	keywords = {G.1.2, G.2.1, Genome rearrangement, Intergenic regions, Reversal, Transposition},
}

@software{noauthor_criterion_nodate,
	title = {Criterion: Robust, reliable performance measurement and analysis},
	url = {https://hackage.haskell.org/package/criterion},
	abstract = {This library provides a powerful but simple way to measure software performance. It provides both a framework for executing and analysing benchmarks and a set of driver functions that makes it easy to build and run benchmarks, and to analyse their results.},
	version = {1.6.3.0},
}

@inproceedings{shi_parameter_1998,
	location = {Berlin, Heidelberg},
	title = {Parameter selection in particle swarm optimization},
	isbn = {978-3-540-68515-9},
	doi = {10.1007/BFb0040810},
	series = {Lecture Notes in Computer Science},
	abstract = {This paper first analyzes the impact that inertia weight and maximum velocity have on the performance of the particle swarm optimizer, and then provides guidelines for selecting these two parameters. Analysis of experiments demonstrates the validity of these guidelines.},
	pages = {591--600},
	booktitle = {Evolutionary Programming {VII}},
	publisher = {Springer},
	author = {Shi, Yuhui and Eberhart, Russell C.},
	editor = {Porto, V. W. and Saravanan, N. and Waagen, D. and Eiben, A. E.},
	date = {1998},
	langid = {english},
}

@inproceedings{kennedy_particle_1995,
	title = {Particle swarm optimization},
	volume = {4},
	url = {https://ieeexplore.ieee.org/document/488968},
	doi = {10.1109/ICNN.1995.488968},
	abstract = {A concept for the optimization of nonlinear functions using particle swarm methodology is introduced. The evolution of several paradigms is outlined, and an implementation of one of the paradigms is discussed. Benchmark testing of the paradigm is described, and applications, including nonlinear function optimization and neural network training, are proposed. The relationships between particle swarm optimization and both artificial life and genetic algorithms are described.},
	eventtitle = {Proceedings of {ICNN}'95 - International Conference on Neural Networks},
	pages = {1942--1948 vol.4},
	booktitle = {Proceedings of {ICNN}'95 - International Conference on Neural Networks},
	author = {Kennedy, J. and Eberhart, R.},
	urldate = {2023-11-02},
	date = {1995-11},
}

@inproceedings{bratton_defining_2007,
	title = {Defining a Standard for Particle Swarm Optimization},
	url = {https://ieeexplore.ieee.org/document/4223164},
	doi = {10.1109/SIS.2007.368035},
	abstract = {Particle swarm optimization has become a common heuristic technique in the optimization community, with many researchers exploring the concepts, issues, and applications of the algorithm. In spite of this attention, there has as yet been no standard definition representing exactly what is involved in modern implementations of the technique. A standard is defined here which is designed to be a straightforward extension of the original algorithm while taking into account more recent developments that can be expected to improve performance on standard measures. This standard algorithm is intended for use both as a baseline for performance testing of improvements to the technique, as well as to represent {PSO} to the wider optimization community},
	eventtitle = {2007 {IEEE} Swarm Intelligence Symposium},
	pages = {120--127},
	booktitle = {2007 {IEEE} Swarm Intelligence Symposium},
	author = {Bratton, Daniel and Kennedy, James},
	urldate = {2023-11-02},
	date = {2007-04},
}

@book{yang_nature-inspired_2010,
	edition = {2. ed},
	title = {Nature-inspired metaheuristic algorithms},
	isbn = {978-1-905986-28-6},
	url = {https://www.google.com.br/books/edition/Nature_inspired_Metaheuristic_Algorithms/iVB_ETlh4ogC},
	pagetotal = {148},
	publisher = {Luniver Press},
	author = {Yang, Xin-She},
	date = {2010},
	langid = {english},
	keywords = {Heuristics, Meta Heuristic},
}

@article{ferdous_solving_2013,
	title = {Solving the Minimum Common String Partition Problem with the Help of Ants},
	doi = {10.1007/978-3-642-38703-6_36},
	abstract = {In this paper, we consider the problem of ﬁnding minimum common partition of two strings ({MCSP}). The problem has its application in genome comparison. As it is an {NP}-hard, discrete combinatorial optimization problem, we employ a metaheuristic technique, namely, {MAX}-{MIN} ant system to solve this. The preliminary experimental results are found to be promising.},
	pages = {306--313},
	journaltitle = {Lecture Notes in Computer Science},
	author = {Ferdous, S M and Rahman, M Sohel},
	date = {2013},
	langid = {english},
	keywords = {Heuristics, Meta Heuristic},
}

@article{goldstein_minimum_2005-1,
	title = {Minimum Common String Partition Problem: Hardness and Approximations},
	volume = {12},
	issn = {1077-8926},
	doi = {10.37236/1947},
	shorttitle = {Minimum Common String Partition Problem},
	abstract = {String comparison is a fundamental problem in computer science, with applications in areas such as computational biology, text processing and compression. In this paper we address the minimum common string partition problem, a string comparison problem with tight connection to the problem of sorting by reversals with duplicates, a key problem in genome rearrangement. A partition of a string A is a sequence P = (P1, P2, . . . , Pm) of strings, called the blocks, whose concatenation is equal to A. Given a partition P of a string A and a partition Q of a string B, we say that the pair 〈P, Q〉 is a common partition of A and B if Q is a permutation of P. The minimum common string partition problem ({MCSP}) is to ﬁnd a common partition of two strings A and B with the minimum number of blocks. The restricted version of {MCSP} where each letter occurs at most k times in each input string, is denoted by k-{MCSP}.},
	journaltitle = {The Electronic Journal of Combinatorics},
	shortjournal = {E-{JC}},
	author = {Goldstein, Avraham and Kolman, Petr and Zheng, Jie},
	date = {2005},
	langid = {english},
}

@collection{marti_handbook_2018,
	location = {Cham},
	title = {Handbook of Heuristics},
	isbn = {978-3-319-07124-4},
	url = {http://link.springer.com/10.1007/978-3-319-07124-4},
	publisher = {Springer International Publishing},
	editor = {Martí, Rafael and Pardalos, Panos M. and Resende, Mauricio G. C.},
	urldate = {2023-09-17},
	date = {2018},
	langid = {english},
	doi = {10.1007/978-3-319-07124-4},
	keywords = {Heuristics, Meta Heuristic},
}

@inproceedings{onwubolu_smallest_2009,
	location = {Berlin, Heidelberg},
	title = {Smallest Position Value Approach},
	volume = {175},
	isbn = {978-3-540-92150-9 978-3-540-92151-6},
	url = {http://link.springer.com/10.1007/978-3-540-92151-6_5},
	doi = {10.1007/978-3-540-92151-6_5},
	abstract = {In a traveling salesman problem, if the set of nodes is divided into clusters for a single node from each cluster to be visited, then the problem is known as the generalized traveling salesman problem ({GTSP}). Such problem aims to find a tour with minimum cost passing through only a single node from each cluster. In attempt to show how a continuous optimization algorithm can be used to solve a discrete/combinatorial optimization problem, this chapter presents a standard continuous differential evolution algorithm along with a smallest position value ({SPV}) rule and a unique solution representation to solve the {GTSP}. The performance of the differential evolution algorithm is tested on a set of benchmark instances with symmetric distances ranging from 51 (11) to 442 (89) nodes (clusters) from the literature. Computational results are presented and compared to a random key genetic algorithm ({RKGA}) from the literature.},
	pages = {121--138},
	publisher = {Springer Berlin Heidelberg},
	author = {Tasgetiren, Fatih and Chen, Angela and Gencyilmaz, Gunes and Gattoufi, Said},
	editor = {Onwubolu, Godfrey C. and Davendra, Donald},
	urldate = {2023-10-29},
	date = {2009},
	langid = {english},
	doi = {10.1007/978-3-540-92151-6_5},
	note = {Book Title: Differential Evolution: A Handbook for Global Permutation-Based Combinatorial Optimization
{ISSN}: 1860-949X
Series Title: Studies in Computational Intelligence},
}

@article{teixeira_algorithms_2021,
	title = {Algorithms for Transforming Strings by Reversals},
	volume = {19},
	url = {https://sol.sbc.org.br/journals/index.php/reic/article/view/2077},
	abstract = {\&lt;p\&gt;A reversal is an operation that cuts a segment of a string and reverses it. The problem of Transforming Strings by Reversals ({TSbR}) consists of, given two strings, ﬁnding the minimum number of reversals that transform one string into the other. {TSbR} is {NP}-hard and there are not many algorithmic results for it. In this work, we propose eight practical algorithms for {TSbR} and compare them, experimentally\&lt;/p\&gt;},
	number = {2},
	journaltitle = {Eletronic Journal of Undergraduate Research on Computing},
	shortjournal = {{REIC}},
	author = {Teixeira, Gustavo da S. and Lintzmayer, Carla N.},
	urldate = {2023-09-19},
	date = {2021-06-03},
	note = {Section: Edição Especial: {CTIC}/{CSBC}},
}

@inproceedings{goldstein_minimum_2005-2,
	location = {Berlin, Heidelberg},
	title = {Minimum Common String Partition Problem: Hardness and Approximations},
	isbn = {978-3-540-30551-4},
	doi = {10.1007/978-3-540-30551-4_43},
	series = {Lecture Notes in Computer Science},
	shorttitle = {Minimum Common String Partition Problem},
	abstract = {String comparison is a fundamental problem in computer science, with applications in areas such as computational biology, text processing or compression. In this paper we address the minimum common string partition problem, a string comparison problem with tight connection to the problem of sorting by reversals with duplicates, a key problem in genome rearrangement.},
	pages = {484--495},
	booktitle = {Algorithms and Computation},
	publisher = {Springer},
	author = {Goldstein, Avraham and Kolman, Petr and Zheng, Jie},
	editor = {Fleischer, Rudolf and Trippen, Gerhard},
	date = {2005},
	langid = {english},
	keywords = {Genome Rearrangement, Input String, Minimum Vertex Cover, Small Instance, Truth Assignment},
}

@article{cygan_minimum_2021,
	title = {Minimum Common String Partition: Exact Algorithms},
	abstract = {In the minimum common string partition problem ({MCSP}), one gets two strings and is asked to find the minimum number of cuts in the first string such that the second string can be obtained by rearranging the resulting pieces. It is a difficult algorithmic problem having applications in computational biology, text processing, and data compression. {MCSP} has been studied extensively from various algorithmic angles: there are many papers studying approximation, heuristic, and parameterized algorithms. At the same time, almost nothing is known about its exact complexity. In this paper, we present new results in this direction. We improve the known 2n upper bound (where n is the length of input strings) to ϕn where ϕ ≈ 1.618... is the golden ratio. The algorithm uses Fibonacci numbers to encode subsets as monomials of a certain implicit polynomial and extracts one of its coefficients using the fast Fourier transform. Then, we show that the case of constant size alphabet can be solved in subexponential time 2O(n log log n/ log n) by a hybrid strategy: enumerate all long pieces and use dynamic programming over histograms of short pieces. Finally, we prove almost matching lower bounds assuming the Exponential Time Hypothesis.},
	author = {Cygan, Marek and Kulikov, Alexander S and Mihajlin, Ivan and Nikolaev, Maksim and Reznikov, Grigory},
	date = {2021},
	langid = {english},
	keywords = {Exact Solution},
}

@article{blum_construct_2015,
	title = {Construct, Merge, Solve \& Adapt: A New General Algorithm for Combinatorial Optimization},
	volume = {68},
	doi = {10.1016/j.cor.2015.10.014},
	shorttitle = {Construct, Merge, Solve \& Adapt},
	journaltitle = {Computers \& Operations Research},
	shortjournal = {Computers \& Operations Research},
	author = {Blum, Christian and Pinacho Davidson, Pedro and López-Ibáñez, Manuel and Lozano, Jose},
	date = {2015-11-01},
	keywords = {Exact Solution, Heuristics, Linear Programming, Meta Heuristic},
}

@misc{ferdous_solving_2014-1,
	title = {Solving the Minimum Common String Partition Problem with the Help of Ants},
	url = {http://arxiv.org/abs/1401.4539},
	abstract = {In this paper, we consider the problem of ﬁnding a minimum common partition of two strings. The problem has its application in genome comparison. As it is an {NP}-hard, discrete combinatorial optimization problem, we employ a metaheuristic technique, namely, {MAX}-{MIN} ant system to solve this problem. To achieve better eﬃciency we ﬁrst map the problem instance into a special kind of graph. Subsequently, we employ a {MAX}-{MIN} ant system to achieve high quality solutions for the problem. Experimental results show the superiority of our algorithm in comparison with the state of art algorithm in the literature. The improvement achieved is also justiﬁed by standard statistical test.},
	number = {{arXiv}:1401.4539},
	publisher = {{arXiv}},
	author = {Ferdous, S. M. and Rahman, M. Sohel},
	urldate = {2023-09-17},
	date = {2014-05-21},
	langid = {english},
	eprinttype = {arxiv},
	eprint = {1401.4539 [cs]},
	keywords = {Computer Science - Artificial Intelligence, Heuristics, Meta Heuristic},
}

@article{melanie_introduction_nodate,
	title = {An Introduction to Genetic Algorithms},
	author = {Melanie, Mitchell},
	langid = {english},
	keywords = {Heuristics, Meta Heuristic},
}

@book{blum_metaheuristics_2016,
	title = {Metaheuristics for String Problems in Bio-Informatics},
	isbn = {978-1-84821-812-3},
	abstract = {So-called string problems are abundant in bioinformatics and computational biology. New optimization problems dealing with {DNA} or protein sequences are constantly arising and researchers are highly in need of efficient optimization techniques for solving them.

One obstacle for optimization practitioners is the atypical nature of these problems which require an interdisciplinary approach in order to solve them efficiently and accurately.},
	author = {Blum, Christian and Festa, Paola},
	date = {2016-09-16},
	doi = {10.1002/9781119136798},
	note = {Journal Abbreviation: Metaheuristics for String Problems in Bio-informatics
Publication Title: Metaheuristics for String Problems in Bio-informatics},
	keywords = {Heuristics, Meta Heuristic},
}

@incollection{hutchison_greedy_2004,
	location = {Berlin, Heidelberg},
	title = {The Greedy Algorithm for the Minimum Common String Partition Problem},
	volume = {3122},
	isbn = {978-3-540-22894-3 978-3-540-27821-4},
	url = {http://link.springer.com/10.1007/978-3-540-27821-4_8},
	pages = {84--95},
	booktitle = {Approximation, Randomization, and Combinatorial Optimization. Algorithms and Techniques},
	publisher = {Springer Berlin Heidelberg},
	author = {Chrobak, Marek and Kolman, Petr and Sgall, Jiří},
	editor = {Jansen, Klaus and Khanna, Sanjeev and Rolim, José D. P. and Ron, Dana},
	editorb = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Dough and Vardi, Moshe Y. and Weikum, Gerhard},
	editorbtype = {redactor},
	urldate = {2023-08-05},
	date = {2004},
	doi = {10.1007/978-3-540-27821-4_8},
	note = {Series Title: Lecture Notes in Computer Science},
	keywords = {Greedy Algorithm},
}

@inproceedings{kolman_approximating_2005,
	location = {Berlin, Heidelberg},
	title = {Approximating Reversal Distance for Strings with Bounded Number of Duplicates},
	isbn = {978-3-540-31867-5},
	doi = {10.1007/11549345_50},
	series = {Lecture Notes in Computer Science},
	abstract = {For a string A=a1... an, a reversalρ(i,j), 1≤ i{\textless}j≤ n, transforms the string A into a string A′=a1... ai − − 1ajaj − − 1 ... aiaj + 1 ... an, that is, the reversal ρ(i,j) reverses the order of symbols in the substring ai... ajof A. In a case of signed strings, where each symbol is given a sign + or –, the reversal operation also flips the sign of each symbol in the reversed substring. Given two strings, A and B, signed or unsigned, sorting by reversals ({SBR}) is the problem of finding the minimum number of reversals that transform the string A into the string B.},
	pages = {580--590},
	booktitle = {Mathematical Foundations of Computer Science 2005},
	publisher = {Springer},
	author = {Kolman, Petr},
	editor = {Jȩdrzejowicz, Joanna and Szepietowski, Andrzej},
	date = {2005},
	langid = {english},
	keywords = {Approximation algorithms, Edit distance, Greedy Algorithm, Minimum common string partition, Sorting by reversals, String comparison},
}

@article{blum_minimum_2018,
	title = {Minimum common string partition: on solving large-scale problem instances},
	volume = {27},
	doi = {10.1111/itor.12603},
	shorttitle = {Minimum common string partition},
	abstract = {Minimum common string partition is an {NP}‐hard combinatorial optimization problem from the bioinformatics field. The current state‐of‐the‐art algorithm is a hybrid technique known as construct, merge, solve, and adapt ({CMSA}). This algorithm combines two main algorithmic components: generating solutions in a probabilistic way and solving reduced subinstances obtained from the tackled problem instances, if possible, to optimality. However, the {CMSA} algorithm was not intended for application to very large problem instances. Therefore, in this paper we present a technique that makes {CMSA}, and other available algorithms for this problem, applicable to problem instances that are about one order of magnitude larger than the largest problem instances considered so far. Moreover, a reduced variable neighborhood search ({RVNS}) for solving the tackled problem, based on integer programming, is introduced. The experimental results show that the modified {CMSA} algorithm is very strong for problem instances based on rather small alphabets. With growing alphabet size, it turns out that {RVNS} has a growing advantage over {CMSA}.},
	journaltitle = {International Transactions in Operational Research},
	shortjournal = {International Transactions in Operational Research},
	author = {Blum, Christian},
	date = {2018-10-09},
}

@inproceedings{goldstein_quick_2011,
	location = {Berlin, Heidelberg},
	title = {Quick Greedy Computation for Minimum Common String Partitions},
	isbn = {978-3-642-21458-5},
	doi = {10.1007/978-3-642-21458-5_24},
	series = {Lecture Notes in Computer Science},
	abstract = {In the minimum common string partition problem one is given two strings S and T with the same character statistics and one seeks the smallest partition of S into substrings so that T can also be partitioned into the same substring multiset. The problem is fundamental in several variants of edit distance with block operations, e.g. signed reversal distance with duplicates and edit distance with moves.},
	pages = {273--284},
	booktitle = {Combinatorial Pattern Matching},
	publisher = {Springer},
	author = {Goldstein, Isaac and Lewenstein, Moshe},
	editor = {Giancarlo, Raffaele and Manzini, Giovanni},
	date = {2011},
	langid = {english},
	keywords = {Approximation Factor, Edit Distance, Edit Operation, Greedy Algorithm, Greedy Method},
}

@inproceedings{he_novel_2007,
	location = {Berlin, Heidelberg},
	title = {A Novel Greedy Algorithm for the Minimum Common String Partition Problem},
	isbn = {978-3-540-72031-7},
	doi = {10.1007/978-3-540-72031-7_40},
	series = {Lecture Notes in Computer Science},
	abstract = {The Minimum Common String Partition problem ({MCSP}) is to partition two given input strings into the same collection of substrings, where the number of substrings in the partition is minimized. This problem is a key problem in genome rearrangement, and is closely related to the problem of sorting by reversals with duplicates. {MCSP} is {NP}-hard, even for the most trivial case, 2-{MCSP}, where each letter occurs at most twice in each input string. There are various approximation algorithms which can achieve very good approximation ratios but with complicated implementations, for example, 1.5-approximation algorithm for 2-{MCSP}, 1.1037-approximation algorithm for 2-{MCSP} and a 4-approximation algorithm for 3-{MCSP}. There is also a simple greedy algorithm for {MCSP} which extracts the longest common substring from the given strings at each step. In this paper, we propose a novel greedy algorithm for {MCSP}, where we extract the longest common substring containing a symbol occurring only once at each step whenever there is a such symbol. We show our algorithm is more “worst case” greedy at each step than the greedy algorithm and the expected performance of our algorithm is better than that of the greedy algorithm. Our experiments show that our method achieves a better partition on average than the greedy algorithm does. Another advantage of our algorithm is that it is much faster than the greedy algorithm.},
	pages = {441--452},
	booktitle = {Bioinformatics Research and Applications},
	publisher = {Springer},
	author = {He, Dan},
	editor = {Măndoiu, Ion and Zelikovsky, Alexander},
	date = {2007},
	langid = {english},
	keywords = {Approximation Ratio, Genome Rearrangement, Greedy Algorithm, Input String, Optimal Partition},
}

@thesis{siqueira_distancia_2018,
	title = {Distância de Reversão com Genes Duplicados},
	url = {https://www.ic.unicamp.br/~reltech/PFG/2018/PFG-18-20.pdf},
	abstract = {Neste trabalho, abordamos o problema de distância de reversão em genomas com genes duplicados. Desenvolvemos quatro heurísticas para o problema, sendo que algumas delas apresentam variações, diferenciando-se pela ação tomada dado um determinado cenário. Dentre as heurísticas que foram desenvolvidas nesse trabalho, uma delas atua sobre um mapeamento do genoma como uma permutação, o que nos permite obter uma sequência de operações que transforma um genoma em outro a partir de qualquer algoritmo para o problema que não considera repetição de genes. As demais heurísticas utilizam critérios gulosos para determinar uma sequência de operações que transforma um genoma em outro. Para analisarmos a qualidades das soluções apresentadas pelas heurísticas, criamos uma base de dados representando genomas com características distintas e realizamos um comparativo entre os resultados obtidos.},
	pagetotal = {20},
	institution = {Institute of Computing, University of Campinas},
	type = {Bachelor's thesis},
	author = {Siqueira, Gabriel and Brito, Klairton Lima and Dias, Zanoni},
	date = {2018-12},
	langid = {portuguese},
}

@inproceedings{alexandrino_1375-approximation_2022,
	location = {Cham},
	title = {A 1.375-Approximation Algorithm for Sorting by Transpositions with Faster Running Time},
	isbn = {978-3-031-21175-1},
	doi = {10.1007/978-3-031-21175-1_16},
	series = {Lecture Notes in Computer Science},
	abstract = {Sorting Permutations by Transpositions is a famous problem in the Computational Biology field. This problem is {NP}-Hard, and the best approximation algorithm, proposed by Elias and Hartman in 2006, has an approximation factor of 1.375. Since then, several researchers have proposed modifications to this algorithm to reduce the time complexity. More recently, researchers showed that the algorithm proposed by Elias and Hartman might need one more operation above the approximation ratio and presented a new 1.375-approximation algorithm using an algebraic approach that corrected this issue. This algorithm runs in \$\$O(n{\textasciicircum}6)\$\$time. In this paper, we present an efficient way to fix Elias and Hartman algorithm that runs in \$\$O(n{\textasciicircum}5)\$\$. By comparing the three approximation algorithms with all permutations of size \$\$n {\textbackslash}le 12\$\$, we also show that our algorithm finds the exact distance in more instances than the previous two algorithms.},
	pages = {147--157},
	booktitle = {Advances in Bioinformatics and Computational Biology},
	publisher = {Springer Nature Switzerland},
	author = {Alexandrino, Alexsandro Oliveira and Brito, Klairton Lima and Oliveira, Andre Rodrigues and Dias, Ulisses and Dias, Zanoni},
	editor = {Scherer, Nicole M. and de Melo-Minardi, Raquel C.},
	date = {2022},
	langid = {english},
	keywords = {Genome rearrangements, Time complexity analysis, Transpositions},
}

@online{noauthor_plano_nodate,
	title = {Plano de Trabalho},
	url = {https://www.overleaf.com/project/64b6ecd436d71aecb639d99c},
	abstract = {An online {LaTeX} editor that’s easy to use. No installation, real-time collaboration, version control, hundreds of {LaTeX} templates, and more.},
	urldate = {2023-07-19},
	langid = {english},
}

@inproceedings{siqueira_heuristics_2021,
	location = {Cham},
	title = {Heuristics for Cycle Packing of Adjacency Graphs for Genomes with Repeated Genes},
	isbn = {978-3-030-91814-9},
	doi = {10.1007/978-3-030-91814-9_9},
	series = {Lecture Notes in Computer Science},
	abstract = {The Adjacency Graph is a structure used to model genomes in several rearrangement distance problems. In particular, most studies use properties of a maximum cycle packing of this graph to develop bounds and algorithms for rearrangement distance problems, such as the reversal distance and the Double Cut and Join ({DCJ}) distance. When each genome has no repeated genes, there exists only one cycle packing for the graph. However, when each genome may have repeated genes, the problem of finding a maximum cycle packing for the adjacency graph (Adjacency Graph Packing) is {NP}-hard. In this work, we developed a greedy random heuristic and a genetic algorithm heuristic for the Adjacency Graph Packing problem for genomes with repeated genes. We present experimental results and compare these heuristics with the {SOAR} framework. Furthermore, we show how the solutions from our algorithms can improve the estimation for the reversal distance when compared to the {SOAR} framework. Lastly, we applied our genetic algorithm heuristic in real genomic data to validate its practical use.},
	pages = {93--105},
	booktitle = {Advances in Bioinformatics and Computational Biology},
	publisher = {Springer International Publishing},
	author = {Siqueira, Gabriel and Oliveira, Andre Rodrigues and Alexandrino, Alexsandro Oliveira and Dias, Zanoni},
	editor = {Stadler, Peter F. and Walter, Maria Emilia M. T. and Hernandez-Rosales, Maribel and Brigido, Marcelo M.},
	date = {2021},
	langid = {english},
	keywords = {Cycle packing, Genome rearrangements, Reversals},
}

@inproceedings{siqueira_heuristics_2020,
	location = {Cham},
	title = {Heuristics for Reversal Distance Between Genomes with Duplicated Genes},
	isbn = {978-3-030-42266-0},
	doi = {10.1007/978-3-030-42266-0_3},
	series = {Lecture Notes in Computer Science},
	abstract = {In comparative genomics, one goal is to find similarities between genomes of different organisms. Comparisons using genome features like genes, gene order, and regulatory sequences are carried out with this purpose in mind.},
	pages = {29--40},
	booktitle = {Algorithms for Computational Biology},
	publisher = {Springer International Publishing},
	author = {Siqueira, Gabriel and Brito, Klairton Lima and Dias, Ulisses and Dias, Zanoni},
	editor = {Martín-Vide, Carlos and Vega-Rodríguez, Miguel A. and Wheeler, Travis},
	date = {2020},
	langid = {english},
	keywords = {Duplicated genes, Genome rearrangement, Heuristics, Reversal},
}

@article{siqueira_approximation_2021-1,
	title = {Approximation algorithm for rearrangement distances considering repeated genes and intergenic regions},
	volume = {16},
	issn = {1748-7188},
	url = {https://doi.org/10.1186/s13015-021-00200-w},
	doi = {10.1186/s13015-021-00200-w},
	abstract = {The rearrangement distance is a method to compare genomes of different species. Such distance is the number of rearrangement events necessary to transform one genome into another. Two commonly studied events are the transposition, which exchanges two consecutive blocks of the genome, and the reversal, which reverts a block of the genome. When dealing with such problems, seminal works represented genomes as sequences of genes without repetition. More realistic models started to consider gene repetition or the presence of intergenic regions, sequences of nucleotides between genes and in the extremities of the genome. This work explores the transposition and reversal events applied in a genome representation considering both gene repetition and intergenic regions. We define two problems called Minimum Common Intergenic String Partition and Reverse Minimum Common Intergenic String Partition. Using a relation with these two problems, we show a \$\${\textbackslash}Theta {\textbackslash}left( k {\textbackslash}right)\$\$-approximation for the Intergenic Transposition Distance, the Intergenic Reversal Distance, and the Intergenic Reversal and Transposition Distance problems, where k is the maximum number of copies of a gene in the genomes. Our practical experiments on simulated genomes show that the use of partitions improves the estimates for the distances.},
	pages = {21},
	number = {1},
	journaltitle = {Algorithms for Molecular Biology},
	shortjournal = {Algorithms for Molecular Biology},
	author = {Siqueira, Gabriel and Alexandrino, Alexsandro Oliveira and Oliveira, Andre Rodrigues and Dias, Zanoni},
	urldate = {2023-07-18},
	date = {2021-10-13},
	keywords = {Genome rearrangement, Intergenic regions, Reversal},
}

@article{siqueira_heuristics_2021-1,
	title = {Heuristics for Genome Rearrangement Distance With Replicated Genes},
	volume = {18},
	issn = {1557-9964},
	doi = {10.1109/TCBB.2021.3095021},
	abstract = {In comparative genomics, one goal is to find similarities between genomes of different organisms. Comparisons using genome features like genes, gene order, and regulatory sequences are carried out with this purpose in mind. Genome rearrangements are mutational events that affect large extensions of the genome. They are responsible for creating extant species with conserved genes in different positions across genomes. Close species — from an evolutionary point of view — tend to have the same set of genes or share most of them. When we consider gene order to compare two genomes, it is possible to use a parsimony criterion to estimate how close the species are. We are interested in the shortest sequence of genome rearrangements capable of transforming one genome into the other, which is named rearrangement distance. Reversal is one of the most studied genome rearrangements events. This event acts in a segment of the genome, inverting the position and the orientation of genes in it. Transposition is another widely studied event. This event swaps the position of two consecutive segments of the genome. When the genome has no gene repetition, a common approach is to map it as a permutation such that each element represents a conserved block. When genomes have replicated genes, this mapping is usually performed using strings. The number of replicas depends on the organisms being compared, but in many scenarios, it tends to be small. In this work, we study the rearrangement distance between genomes with replicated genes considering that the orientation of genes is unknown. We present four heuristics for the problem of genome rearrangement distance with replicated genes. We carry out experiments considering the exclusive use of the reversals or transpositions events, as well as the version in which both events are allowed. We developed a database of simulated genomes and compared our results with other algorithms from the literature. The experiments showed that our heuristics with more sophisticated rules presented a better performance than the known algorithms to estimate the evolutionary distance between genomes with replicated genes. In order to validate the application of our algorithms in real data, we construct a phylogenetic tree based on the distance provided by our algorithm and compare it with a know tree from the literature.},
	pages = {2094--2108},
	number = {6},
	journaltitle = {{IEEE}/{ACM} Transactions on Computational Biology and Bioinformatics},
	author = {Siqueira, Gabriel and Brito, Klairton Lima and Dias, Ulisses and Dias, Zanoni},
	date = {2021-11},
	note = {Conference Name: {IEEE}/{ACM} Transactions on Computational Biology and Bioinformatics},
	keywords = {Approximation algorithms, Bioinformatics, Databases, Genome rearrangement, Genomics, Organisms, Sorting, Transforms, heuristics, replicated genes},
}

@inproceedings{oliveira_alexandrino_transposition_2022,
	location = {Cham},
	title = {Transposition Distance Considering Intergenic Regions for Unbalanced Genomes},
	isbn = {978-3-031-23198-8},
	doi = {10.1007/978-3-031-23198-8_10},
	series = {Lecture Notes in Computer Science},
	abstract = {In seminal works of genome rearrangements, the distance between two genomes is measured by the minimum number of rearrangements (e.g., reversals, transpositions, {DCJs}, or combination of them) needed to transform a given permutation into another, where permutations represent gene orders of genomes with the same gene content. For the past few years, researchers have been extending the traditional models of genome rearrangement distance by either considering unbalanced genomes or adding more features to the representation of the genomes to be compared. In this work, we make progress in this direction by studying the intergenic transposition distance on unbalanced genomes, which also considers insertions and deletions as non-conservative rearrangements in the set of possible rearrangements to compute the distance. The best previously known result for this problem is a 4.5-approximation using breakpoints. In this paper, we use an adaptation of the breakpoint graph, a structure used in the literature on genome rearrangements, to present a new lower bound for the distance and a 4-approximation algorithm.},
	pages = {100--113},
	booktitle = {Bioinformatics Research and Applications},
	publisher = {Springer Nature Switzerland},
	author = {Oliveira Alexandrino, Alexsandro and Rodrigues Oliveira, Andre and Jean, Géraldine and Fertin, Guillaume and Dias, Ulisses and Dias, Zanoni},
	editor = {Bansal, Mukul S. and Cai, Zhipeng and Mangul, Serghei},
	date = {2022},
	langid = {english},
	keywords = {Indels, Intergenic regions, Transpositions},
}

@inproceedings{lima_brito_new_2022,
	location = {Cham},
	title = {A New Approach for the Reversal Distance with Indels and Moves in Intergenic Regions},
	isbn = {978-3-031-06220-9},
	doi = {10.1007/978-3-031-06220-9_12},
	series = {Lecture Notes in Computer Science},
	abstract = {Genome rearrangement events are widely used to estimate a minimum-size sequence of mutations capable of transforming a genome into another. The length of this sequence is called distance, and determining it is the main goal in genome rearrangement distance problems. Problems in the genome rearrangement field differ regarding the set of rearrangement events allowed and the genome representation. In this work, we consider the scenario where the genomes share the same set of genes, gene orientation is known, and intergenic regions (structures between a pair of genes and at the extremities of the genome) are taken into account. We use two models, the first model allows only conservative events (reversals and moves), and the second model includes non-conservative events (insertions and deletions) in the intergenic regions. We show that both models result in {NP}-hard problems and we present algorithms with an approximation factor of 2.},
	pages = {205--220},
	booktitle = {Comparative Genomics},
	publisher = {Springer International Publishing},
	author = {Lima Brito, Klairton and Rodrigues Oliveira, Andre and Oliveira Alexandrino, Alexsandro and Dias, Ulisses and Dias, Zanoni},
	editor = {Jin, Lingling and Durand, Dannie},
	date = {2022},
	langid = {english},
	keywords = {Approximation algorithms, Complexity analysis, Genome rearrangements},
}

@inproceedings{rodrigues_oliveira_sorting_2022,
	location = {Cham},
	title = {Sorting by k-Cuts on Signed Permutations},
	isbn = {978-3-031-06220-9},
	doi = {10.1007/978-3-031-06220-9_11},
	series = {Lecture Notes in Computer Science},
	abstract = {Sorting by Genome Rearrangements is a classic problem in Computational Biology. Several models have been considered so far, each of them defines how a genome is modeled (for example, permutations when assuming no duplicated genes, strings if duplicated genes are allowed, and/or use of signs on each element when gene orientation is known), and which rearrangements are allowed. Recently, a new problem, called Sorting by Multi-Cut Rearrangements, was proposed. It uses the k-Cut rearrangement which cuts a permutation (or a string) at \$\$k {\textbackslash}ge 2\$\$k≥2places and rearranges the generated blocks to obtain a new permutation (or string) of same size. This new rearrangement may model chromoanagenesis, a phenomenon consisting of massive simultaneous rearrangements. Similarly as the Double-Cut-and-Join, this new rearrangement also generalizes several genome rearrangements such as reversals, transpositions, revrevs, transreversals, and block-interchanges. In this paper, we extend a previous work based on unsigned permutations and strings to signed permutations. We show the complexity of this problem for different values of k, that the approximation algorithm proposed for unsigned permutations with any value of k can be adapted to signed permutations, and a 1.5-approximation algorithm for the specific case \$\$k=4\$\$k=4.},
	pages = {189--204},
	booktitle = {Comparative Genomics},
	publisher = {Springer International Publishing},
	author = {Rodrigues Oliveira, Andre and Oliveira Alexandrino, Alexsandro and Jean, Géraldine and Fertin, Guillaume and Dias, Ulisses and Dias, Zanoni},
	editor = {Jin, Lingling and Durand, Dannie},
	date = {2022},
	langid = {english},
	keywords = {Algorithmic complexity, Approximation algorithms, Genome rearrangements, Sorting permutations},
}

@article{oliveira_approximation_2022,
	title = {Approximation algorithms for sorting by k-cuts on signed permutations},
	volume = {45},
	issn = {1573-2886},
	url = {https://doi.org/10.1007/s10878-022-00937-z},
	doi = {10.1007/s10878-022-00937-z},
	abstract = {Sorting by Genome Rearrangements is a classic problem in Computational Biology. Several models have been considered so far, each of them defines how a genome is modeled (for example, permutations when assuming no duplicated genes, strings if duplicated genes are allowed, and/or use of signs on each element when gene orientation is known), and which rearrangements are allowed. Recently, a new problem, called Sorting by Multi-Cut Rearrangements, was proposed. It uses the k-cut rearrangement which cuts a permutation (or a string) at \$\$k {\textbackslash}ge 2\$\$places and rearranges the generated blocks to obtain a new permutation (or string) of same size. This new rearrangement may model chromoanagenesis, a phenomenon consisting of massive simultaneous rearrangements. Similarly as the Double-Cut-and-Join, this new rearrangement also generalizes several genome rearrangements such as reversals, transpositions, revrevs, transreversals, and block-interchanges. In this paper, we extend a previous work based on unsigned permutations and strings to signed permutations. We show the complexity of this problem for different values of k, and that the approximation algorithm proposed for unsigned permutations with any value of k can be adapted to signed permutations. We also show a 1.5-approximation algorithm for the specific case \$\$k=4\$\$, as well as a generic approximation algorithm applicable for any \$\$k{\textbackslash}ge 5\$\$, that always reaches constant ratio. The latter makes use of the cycle graph, a well-known structure in genome rearrangements. We implemented and tested the proposed algorithms on simulated data.},
	pages = {6},
	number = {1},
	journaltitle = {Journal of Combinatorial Optimization},
	shortjournal = {J Comb Optim},
	author = {Oliveira, Andre Rodrigues and Alexandrino, Alexsandro Oliveira and Jean, Géraldine and Fertin, Guillaume and Dias, Ulisses and Dias, Zanoni},
	urldate = {2023-07-18},
	date = {2022-11-17},
	langid = {english},
	keywords = {Algorithmic complexity, Approximation algorithms, Genome rearrangements, Sorting permutations},
}

@article{alexandrino_reversal_2023,
	title = {Reversal and Indel Distance With Intergenic Region Information},
	volume = {20},
	issn = {1557-9964},
	doi = {10.1109/TCBB.2022.3215615},
	abstract = {Recent works on genome rearrangements have shown that incorporating intergenic region information along with gene order in models provides better estimations for the rearrangement distance than using gene order alone. The reversal distance is one of the main problems in genome rearrangements. It has a polynomial time algorithm when only gene order is used to model genomes, assuming that repeated genes do not exist and that gene orientation is known, even when the genomes have distinct gene sets. The reversal distance is {NP}-hard and has a 2-approximation algorithm when incorporating intergenic regions. However, the problem has only been studied assuming genomes with the same set of genes. In this work, we consider the variation that incorporates intergenic regions and that allows genomes to have distinct sets of genes, a scenario that leads us to include indels operations (insertions and deletions). We present a 2.5-approximation algorithm using the labeled intergenic breakpoint graph, which is based on the well-known breakpoint graph structure. We also present an experimental analysis of the proposed algorithm using simulated data, which showed that the practical approximation factor is considerably less than 2.5. Furthermore, we used the algorithm in real genomes to construct a phylogenetic tree.},
	pages = {1628--1640},
	number = {3},
	journaltitle = {{IEEE}/{ACM} Transactions on Computational Biology and Bioinformatics},
	author = {Alexandrino, Alexsandro Oliveira and Brito, Klairton Lima and Oliveira, Andre Rodrigues and Dias, Ulisses and Dias, Zanoni},
	date = {2023-05},
	note = {Conference Name: {IEEE}/{ACM} Transactions on Computational Biology and Bioinformatics},
	keywords = {Approximation algorithms, Bioinformatics, Computational modeling, Estimation, Genome rearrangements, Genomics, Sorting, Transforms, indels, intergenic regions, reversals},
}

@article{brito_genome_2023,
	title = {Genome Rearrangement Distance With a Flexible Intergenic Regions Aspect},
	volume = {20},
	issn = {1557-9964},
	doi = {10.1109/TCBB.2022.3165443},
	abstract = {Most mathematical models for genome rearrangement problems have considered only gene order. In this way, the rearrangement distance considering some set of events, such as reversal and transposition events, is commonly defined as the minimum number of rearrangement events that transform the gene order from a genome {\textbackslash}mathcal G\_1G1 into the gene order from a genome {\textbackslash}mathcal G\_2G2. Recent works initiate incorporating more information such as the sizes of the intergenic regions (i.e., number of nucleotides between pairs of consecutive genes), which yields good results for estimated distances on real data. In these models, besides transforming the gene order, the sequence of rearrangement events must transform the list of intergenic regions sizes from {\textbackslash}mathcal G\_1G1 into the list of intergenic regions sizes from {\textbackslash}mathcal G\_2G2 (target list). We study a new variation where the target list is flexible, in the sense that each target intergenic region size is in a range of acceptable values. This allows us to model scenarios where the main objective is still to transform the order of genes from the source genome into the target genome, allowing flexibility in the sizes of the intergenic regions, since the nucleotides in these regions tend to undergo more changes when compared to genes. We investigate the rearrangement distance considering three sets of events, two with the exclusive use of reversals or transpositions, and the other allowing both rearrangement events. We present approximation algorithms for the problems and an {NP}-hardness proof. Our results rely on the Flexible Weighted Cycle Graph, adapted from the breakpoint graph to deal with flexible intergenic regions sizes.},
	pages = {1641--1653},
	number = {3},
	journaltitle = {{IEEE}/{ACM} Transactions on Computational Biology and Bioinformatics},
	author = {Brito, Klairton Lima and Alexandrino, Alexsandro Oliveira and Oliveira, Andre Rodrigues and Dias, Ulisses and Dias, Zanoni},
	date = {2023-05},
	note = {Conference Name: {IEEE}/{ACM} Transactions on Computational Biology and Bioinformatics},
	keywords = {Approximation algorithms, Bioinformatics, Complexity theory, Data models, Genome rearrangements, Genomics, Sorting, Transforms, intergenic regions, reversals, transpositions},
}

@article{lintzmayer_approximation_2015,
	title = {Approximation algorithms for sorting by length-weighted prefix and suffix operations},
	volume = {593},
	issn = {0304-3975},
	url = {https://www.sciencedirect.com/science/article/pii/S0304397515004818},
	doi = {10.1016/j.tcs.2015.05.039},
	abstract = {The traditional approach for the problems of sorting permutations by rearrangements is to consider that all operations have the same unitary cost. In this case, the goal is to find the minimum number of allowed rearrangements that are needed to sort a given permutation, and numerous efforts have been made over the past years regarding these problems. On the other hand, a long rearrangement (which is in fact a mutation) is more likely to disturb the organism. Therefore, weights based on the length of the segment involved may have an important role in the evolutionary process. In this paper we present the first results regarding problems of sorting permutations by length-weighted operations that consider rearrangement models with prefix and suffix variations of reversals and transpositions, which are the two most common types of genome rearrangements. Our main results are O(lg2⁡n)-approximation algorithms for 10 such problems.},
	pages = {26--41},
	journaltitle = {Theoretical Computer Science},
	shortjournal = {Theoretical Computer Science},
	author = {Lintzmayer, Carla Negri and Fertin, Guillaume and Dias, Zanoni},
	urldate = {2023-07-18},
	date = {2015-08-16},
	langid = {english},
	keywords = {Approximation algorithms, Genome rearrangements, Length-weighted operations, Prefix and suffix operations, Reversals and transpositions},
}

@article{oliveira_sorting_2018,
	title = {Sorting signed circular permutations by super short operations},
	volume = {13},
	issn = {1748-7188},
	url = {https://doi.org/10.1186/s13015-018-0131-6},
	doi = {10.1186/s13015-018-0131-6},
	abstract = {One way to estimate the evolutionary distance between two given genomes is to determine the minimum number of large-scale mutations, or genome rearrangements, that are necessary to transform one into the other. In this context, genomes can be represented as ordered sequences of genes, each gene being represented by a signed integer. If no gene is repeated, genomes are thus modeled as signed permutations of the form \$\${\textbackslash}pi =({\textbackslash}pi \_1 {\textbackslash}pi \_2 {\textbackslash}ldots {\textbackslash}pi \_n)\$\$, and in that case we can consider without loss of generality that one of them is the identity permutation \$\${\textbackslash}iota \_n =(1 2 {\textbackslash}ldots n)\$\$, and that we just need to sort the other (i.e., transform it into \$\${\textbackslash}iota \_n\$\$). The most studied genome rearrangement events are reversals, where a segment of the genome is reversed and reincorporated at the same location; and transpositions, where two consecutive segments are exchanged. Many variants, e.g., combining different types of (possibly constrained) rearrangements, have been proposed in the literature. One of them considers that the number of genes involved, in a reversal or a transposition, is never greater than two, which is known as the problem of sorting by super short operations (or {SSOs}).},
	pages = {13},
	number = {1},
	journaltitle = {Algorithms for Molecular Biology},
	shortjournal = {Algorithms for Molecular Biology},
	author = {Oliveira, Andre R. and Fertin, Guillaume and Dias, Ulisses and Dias, Zanoni},
	urldate = {2023-07-18},
	date = {2018-07-26},
	keywords = {Circular permutations, Genome rearrangements, Super short operations},
}

@inproceedings{oliveira_super_2018,
	location = {Cham},
	title = {Super Short Reversals on Both Gene Order and Intergenic Sizes},
	isbn = {978-3-030-01722-4},
	doi = {10.1007/978-3-030-01722-4_2},
	series = {Lecture Notes in Computer Science},
	abstract = {The evolutionary distance between two genomes can be estimated by computing the minimum length sequence of operations, called genome rearrangements, that transform one genome into another. Usually, a genome is modeled as an ordered sequence of (possibly signed) genes, and almost all the studies that have been undertaken in the genome rearrangement literature consist in shaping biological scenarios into mathematical models: for instance, allowing different genome rearrangements operations at the same time, adding constraints to these rearrangements (e.g., each rearrangement can affect at most a given number k of genes), considering that a rearrangement implies a cost depending on its length rather than a unit cost, etc. However, most of the works in the field have overlooked some important features inside genomes, such as the presence of sequences of nucleotides between genes, called intergenic regions. In this work, we investigate the problem of computing the distance between two genomes, taking into account both gene order and intergenic sizes; the genome rearrangement operation we consider here is a constrained type of reversals, called super short reversals, which affect up to two (consecutive) genes. We propose here three algorithms to solve the problem: a 3-approximation algorithm that applies to any instance, and two additional algorithms that apply only on specific types of genomes with respect to their gene order: the first one is an exact algorithm, while the second is a 2-approximation algorithm.},
	pages = {14--25},
	booktitle = {Advances in Bioinformatics and Computational Biology},
	publisher = {Springer International Publishing},
	author = {Oliveira, Andre Rodrigues and Jean, Géraldine and Fertin, Guillaume and Dias, Ulisses and Dias, Zanoni},
	editor = {Alves, Ronnie},
	date = {2018},
	langid = {english},
	keywords = {Approximation algorithm, Genome rearrangements, Intergenic regions, Super short reversals},
}

@inproceedings{miranda_sorting_2018,
	location = {Cham},
	title = {Sorting Permutations by Limited-Size Operations},
	isbn = {978-3-319-91938-6},
	doi = {10.1007/978-3-319-91938-6_7},
	series = {Lecture Notes in Computer Science},
	abstract = {Estimating the evolutionary distance between genomes of two organisms is a challenging task for Computational Biology. One of the most well-accepted ways to do this is to consider the size of the smallest sequence of rearrangement events required to transform one genome into another, characterizing the rearrangement distance problem. Computationally, genomes can be represented as permutations of integers and, with this, the problem can be reduced to transforming a permutation into the identity with the minimum number of operations (sorting the permutation). These operations are given by a rearrangement model and they affect segments of a genome in different ways. Among the most common models are those that allow only reversals, only transpositions, or both of them. In this paper we study sorting permutations when a restriction of biological relevance is added: the size of the rearrangements should be at most a given value \$\${\textbackslash}lambda \$\$. Some results are known for \$\${\textbackslash}lambda = 2\$\$and \$\${\textbackslash}lambda = 3\$\$but, to the best of our knowledge, there are no results for \$\${\textbackslash}lambda {\textgreater} 3\$\$. We consider rearrangement models that allow reversals and/or transpositions for sorting unsigned permutations given any value of \$\${\textbackslash}lambda \$\$. We present approximation algorithms for 3 such problems, where the approximation factors depend on \$\${\textbackslash}lambda \$\$and/or on the size of the permutations.},
	pages = {76--87},
	booktitle = {Algorithms for Computational Biology},
	publisher = {Springer International Publishing},
	author = {Miranda, Guilherme Henrique Santos and Lintzmayer, Carla Negri and Dias, Zanoni},
	editor = {Jansson, Jesper and Martín-Vide, Carlos and Vega-Rodríguez, Miguel A.},
	date = {2018},
	langid = {english},
	keywords = {Computational Biology, Genome rearrangement, Reversals, Sorting permutations, Transpositions},
}

@inproceedings{oliveira_sorting_2018-1,
	location = {Cham},
	title = {Sorting by Weighted Reversals and Transpositions},
	isbn = {978-3-030-01722-4},
	doi = {10.1007/978-3-030-01722-4_4},
	series = {Lecture Notes in Computer Science},
	abstract = {Genome rearrangements are global mutations that change large stretches of {DNA} sequence throughout genomes. They are rare but accumulate during the evolutionary process leading to organisms with similar genetic material in different places and orientations within the genome. Sorting by Genome Rearrangements problems seek for minimum-length sequences of rearrangements that transform one genome into the other. These problems accept alternative versions that assign weights for each event and the goal is to find a minimum-weight sequence. We study the Sorting by Weighted Reversals and Transpositions problem in two variants depending on whether we model genomes as signed or unsigned permutations. Here, we use weight 2 for reversals and 3 for transpositions and consider theoretical and practical aspects in our analysis.},
	pages = {38--49},
	booktitle = {Advances in Bioinformatics and Computational Biology},
	publisher = {Springer International Publishing},
	author = {Oliveira, Andre Rodrigues and Brito, Klairton Lima and Dias, Zanoni and Dias, Ulisses},
	editor = {Alves, Ronnie},
	date = {2018},
	langid = {english},
	keywords = {Approximation algorithms, Genome rearrangement, Reversals and transpositions, Weighted operations},
}

@inproceedings{alexandrino_approximation_2018,
	location = {Cham},
	title = {Approximation Algorithms for Sorting Permutations by Fragmentation-Weighted Operations},
	isbn = {978-3-319-91938-6},
	doi = {10.1007/978-3-319-91938-6_5},
	series = {Lecture Notes in Computer Science},
	abstract = {Rearrangements are mutations that affect large portions of a genome. When comparing two genomes, one wants to find a sequence of rearrangements that transforms one into another. When we use permutations to represent the genomes, this reduces to the problem of sorting a permutation using some sequence of rearrangements. The traditional approach is to find a sequence of minimum length. However, some studies show that some rearrangements are more likely to disturb an individual, and so a weighted approach is closer to the real evolutionary process. Most weighted approaches consider that the cost of a rearrangement can be related to its type or to the number of elements affected by it. This work introduces a new type of cost function, which is related to the amount of fragmentation caused by a rearrangement. We present some results about lower and upper bounds for the fragmentation-weighted problems and the relation between the unweighted and the fragmentation-weighted approach. Our main results are 2-approximation algorithms for 5 versions of the fragmentation-weighted problem involving reversals and transpositions events.},
	pages = {53--64},
	booktitle = {Algorithms for Computational Biology},
	publisher = {Springer International Publishing},
	author = {Alexandrino, Alexsandro Oliveira and Lintzmayer, Carla Negri and Dias, Zanoni},
	editor = {Jansson, Jesper and Martín-Vide, Carlos and Vega-Rodríguez, Miguel A.},
	date = {2018},
	langid = {english},
	keywords = {Approximation algorithms, Genome rearrangements, Sorting permutations},
}

@article{alexandrino_reversal_2023-1,
	title = {Reversal and Transposition Distance on Unbalanced Genomes Using Intergenic Information},
	url = {https://www.liebertpub.com/doi/10.1089/cmb.2023.0087},
	doi = {10.1089/cmb.2023.0087},
	abstract = {The most common way to calculate the rearrangement distance between two genomes is to use the size of a minimum length sequence of rearrangements that transforms one of the two given genomes into the other, where the genomes are represented as permutations using only their gene order, based on the assumption that genomes have the same gene content. With the advance of research in genome rearrangements, new works extended the classical models by either considering genomes with different gene content (unbalanced genomes) or including more genomic characteristics to the mathematical representation of the genomes, such as the distribution of intergenic regions sizes. In this study, we study the Reversal, Transposition, and Indel (Insertion and Deletion) Distance using intergenic information, which allows comparing unbalanced genomes, because indels are included in the rearrangement model (i.e., the set of possible rearrangements allowed when we compute the distance). For the particular case of transpositions and indels on unbalanced genomes, we present a 4-approximation algorithm, improving a previous 4.5 approximation. This algorithm is extended so as to deal with gene orientation and to maintain the 4-approximation factor for the Reversal, Transposition, and Indel Distance on unbalanced genomes. Furthermore, we evaluate the proposed algorithms using experiments on simulated data.},
	journaltitle = {Journal of Computational Biology},
	author = {Alexandrino, Alexsandro Oliveira and Oliveira, Andre Rodrigues and Jean, Géraldine and Fertin, Guillaume and Dias, Ulisses and Dias, Zanoni},
	urldate = {2023-07-18},
	date = {2023-05-24},
	note = {Publisher: Mary Ann Liebert, Inc., publishers},
	keywords = {indels, intergenic regions, reversals, transpositions},
}

@inproceedings{miranda_sorting_2018-1,
	location = {Cham},
	title = {Sorting \$\${\textbackslash}lambda \$\$-Permutations by \$\${\textbackslash}lambda \$\$-Operations},
	isbn = {978-3-030-01722-4},
	doi = {10.1007/978-3-030-01722-4_1},
	series = {Lecture Notes in Computer Science},
	abstract = {The understanding of how different two organisms are is one of the challenging tasks of modern science. A well accepted way to estimate the evolutionary distance between two organisms is estimating the rearrangement distance, which is the smallest number of rearrangements needed to transform one genome into another. If we represent genomes as permutations, we can represent one as the identity permutation and so we reduce the problem of transforming one permutation into another to the problem of sorting a permutation using the minimum number of operations. In this work, we study the problems of sorting permutations using reversals and/or transpositions, with some additional restrictions of biological relevance. Given a value \$\${\textbackslash}lambda \$\$, the problem now is how to sort a \$\${\textbackslash}lambda \$\$-permutation, which is a permutation where all elements are less than \$\${\textbackslash}lambda \$\$positions away from their correct places (regarding the identity), by applying the minimum number of operations. Each \$\${\textbackslash}lambda \$\$-operation must have size at most \$\${\textbackslash}lambda \$\$and, when applied over a \$\${\textbackslash}lambda \$\$-permutation, the result should also be a \$\${\textbackslash}lambda \$\$-permutation. We present algorithms with approximation factors of \$\$O({\textbackslash}lambda {\textasciicircum}2)\$\$, \$\$O({\textbackslash}lambda )\$\$, and O(1) for the problems of Sorting \$\${\textbackslash}lambda \$\$-Permutations by \$\${\textbackslash}lambda \$\$-Reversals, by \$\${\textbackslash}lambda \$\$-Transpositions and by both operations.},
	pages = {1--13},
	booktitle = {Advances in Bioinformatics and Computational Biology},
	publisher = {Springer International Publishing},
	author = {Miranda, Guilherme Henrique Santos and Alexandrino, Alexsandro Oliveira and Negri Lintzmayer, Carla and Dias, Zanoni},
	editor = {Alves, Ronnie},
	date = {2018},
	langid = {english},
	keywords = {Approximation algorithms, Genome rearrangements, Sorting permutations},
}

@inproceedings{brito_heuristics_2018,
	location = {Cham},
	title = {Heuristics for the Sorting Signed Permutations by Reversals and Transpositions Problem},
	isbn = {978-3-319-91938-6},
	doi = {10.1007/978-3-319-91938-6_6},
	series = {Lecture Notes in Computer Science},
	abstract = {We present two heuristics, Sliding Window and Look Ahead, to improve solutions for the Sorting Signed Permutations by Reversals and Transpositions Problem. To assess the heuristics, we implemented algorithms described in the literature to provide initial solutions. Despite the fact that we addressed a specific problem, both heuristics can be applied to many others within the area of genome rearrangement. When time is a crucial factor, Sliding Window is a better choice because it runs in linear time and improves the initial solutions in 76.4\% of cases. If the quality of the solution is a priority, Look Ahead should be preferred because it improves the initial solutions in 97.6\% of cases, but it runs in \$\${\textbackslash}mathcal \{O\}(n{\textasciicircum}3 {\textbackslash}times alg(n))\$\$, where alg(n) is the complexity of the algorithm given as input. By using these heuristics one may find a good tradeoff between running time and solution improvement.},
	pages = {65--75},
	booktitle = {Algorithms for Computational Biology},
	publisher = {Springer International Publishing},
	author = {Brito, Klairton Lima and Oliveira, Andre Rodrigues and Dias, Ulisses and Dias, Zanoni},
	editor = {Jansson, Jesper and Martín-Vide, Carlos and Vega-Rodríguez, Miguel A.},
	date = {2018},
	langid = {english},
	keywords = {Genome rearrangement, Heuristics, Reversals, Transpositions},
}

@inproceedings{dias_block-interchange_2020,
	location = {Cham},
	title = {Block-Interchange Distance Considering Intergenic Regions},
	isbn = {978-3-030-46417-2},
	doi = {10.1007/978-3-030-46417-2_6},
	series = {Lecture Notes in Computer Science},
	abstract = {Genome Rearrangement ({GR}) is a field of computational biology that uses conserved regions within two genomes as a source of information for comparison purposes. This branch of genomics uses the order in which these regions appear to infer evolutive scenarios and to compute distances between species, while usually neglecting non-conserved {DNA} sequence. This paper sheds light on this matter and proposes models that use both conserved and non-conserved sequences as a source of information. The questions that arise are how classic {GR} algorithms should be adapted and how much would we pay in terms of complexity to have this feature. Advances on these questions aid in measuring advantages of including such approach in {GR} algorithms. We propose to represent non-conserved regions by their lengths and apply this idea in a genome rearrangement problem called “Sorting by Block-Interchanges”. The problem is an interesting choice on the theory of computation viewpoint because it is one of the few problems that are solvable in polynomial time and whose algorithm has a small number of steps. That said, we present a 2-approximation algorithm to this problem along with data structures and formal definitions that may be generalized to other problems in {GR} field considering intergenic regions.},
	pages = {58--69},
	booktitle = {Advances in Bioinformatics and Computational Biology},
	publisher = {Springer International Publishing},
	author = {Dias, Ulisses and Oliveira, Andre Rodrigues and Brito, Klairton Lima and Dias, Zanoni},
	editor = {Kowada, Luis and de Oliveira, Daniel},
	date = {2020},
	langid = {english},
	keywords = {Comparative genomics, Genome rearrangements, Intergenic regions},
}

@article{miranda_approximation_2021,
	title = {Approximation Algorithms for Sorting λ-Permutations by λ-Operations},
	volume = {14},
	rights = {http://creativecommons.org/licenses/by/3.0/},
	issn = {1999-4893},
	url = {https://www.mdpi.com/1999-4893/14/6/175},
	doi = {10.3390/a14060175},
	abstract = {Understanding how different two organisms are is one question addressed by the comparative genomics field. A well-accepted way to estimate the evolutionary distance between genomes of two organisms is finding the rearrangement distance, which is the smallest number of rearrangements needed to transform one genome into another. By representing genomes as permutations, one of them can be represented as the identity permutation, and, so, we reduce the problem of transforming one permutation into another to the problem of sorting a permutation using the minimum number of rearrangements. This work investigates the problems of sorting permutations using reversals and/or transpositions, with some additional restrictions of biological relevance. Given a value λ, the problem now is how to sort a λ-permutation, which is a permutation whose elements are less than λ positions away from their correct places (regarding the identity), by applying the minimum number of rearrangements. Each λ-rearrangement must have size, at most, λ, and, when applied to a λ-permutation, the result should also be a λ-permutation. We present algorithms with approximation factors of O(λ2), O(λ), and O(1) for the problems of Sorting λ-Permutations by λ-Reversals, by λ-Transpositions, and by both operations.},
	pages = {175},
	number = {6},
	journaltitle = {Algorithms},
	author = {Miranda, Guilherme Henrique Santos and Alexandrino, Alexsandro Oliveira and Lintzmayer, Carla Negri and Dias, Zanoni},
	urldate = {2023-07-18},
	date = {2021-06},
	langid = {english},
	note = {Number: 6
Publisher: Multidisciplinary Digital Publishing Institute},
	keywords = {approximation algorithms, genome rearrangements, sorting permutations},
}

@article{alexandrino_length-weighted_2021,
	title = {Length-weighted \$\${\textbackslash}lambda \$\$-rearrangement distance},
	volume = {41},
	issn = {1573-2886},
	url = {https://doi.org/10.1007/s10878-020-00673-2},
	doi = {10.1007/s10878-020-00673-2},
	abstract = {Comparative genomics is a field of biology that aims at comparing genomes of different species. One major question of this field is to find the evolutionary distance between two given genomes. One way to estimate such distance is to use the rearrangement distance, which consists in finding a minimum cost sequence of rearrangements that transforms one genome into another. We use permutations to model the genomes being compared and, in this way, we can treat this problem as the problem of sorting a permutation with a minimum cost sequence of rearrangements. In the early works with rearrangement distance, it was considered that all rearrangements are equally likely to occur and, consequently, they use a unitary cost for all rearrangements. Some variations of the problem were motivated by the observation that rearrangements involving large segments of a genome rarely occur. One of these variants also uses a unitary cost, however it adds a constraint in the length of the operations allowed to estimate the distance. Another variant uses a cost function based on the rearrangement’s length. In this work, we study problems that combine both variants, that is, problems with a constraint in the rearrangement’s length and with a cost function based on the rearrangement’s length. We present approximation algorithms for five such problems involving reversals and/or transpositions for sorting signed and unsigned permutations. We also analyze the problems for specific parameters of the length restriction and for when the cost function is equal to \$\${\textbackslash}ell {\textasciicircum}{\textbackslash}alpha \$\$, where \$\${\textbackslash}ell \$\$is the rearrangement’s length and \$\${\textbackslash}alpha {\textbackslash}ge 1\$\$is a real value parameter.},
	pages = {579--602},
	number = {3},
	journaltitle = {Journal of Combinatorial Optimization},
	shortjournal = {J Comb Optim},
	author = {Alexandrino, Alexsandro Oliveira and Miranda, Guilherme Henrique Santos and Lintzmayer, Carla Negri and Dias, Zanoni},
	urldate = {2023-07-18},
	date = {2021-04-01},
	langid = {english},
	keywords = {Approximation algorithms, Genome rearrangements, Sorting permutations},
}

@article{oliveira_sorting_2021,
	title = {Sorting Signed Permutations by Intergenic Reversals},
	volume = {18},
	issn = {1557-9964},
	doi = {10.1109/TCBB.2020.2993002},
	abstract = {Genome rearrangements are mutations affecting large portions of a genome, and a reversal is one of the most studied genome rearrangements in the literature through the Sorting by Reversals ({SbR}) problem. {SbR} is solvable in polynomial time on signed permutations (i.e., the gene orientation is known), and it is {NP}-hard on unsigned permutations. This problem (and many others considering genome rearrangements) models genome as a list of its genes in the order they appear, ignoring all other information present in the genome. Recent works claimed that the incorporation of the size of intergenic regions, i.e., sequences of nucleotides between genes, may result in better estimators for the real distance between genomes. Here we introduce the Sorting Signed Permutations by Intergenic Reversals problem, that sorts a signed permutation using reversals both on gene order and intergenic sizes. We show that this problem is {NP}-hard by a reduction from the 3-partition problem. Then, we propose a 2-approximation algorithm for it. Finally, we also incorporate intergenic indels (i.e., insertions or deletions of intergenic regions) to overcome a limitation of sorting by conservative events (such as reversals) and propose two approximation algorithms.},
	pages = {2870--2876},
	number = {6},
	journaltitle = {{IEEE}/{ACM} Transactions on Computational Biology and Bioinformatics},
	author = {Oliveira, Andre Rodrigues and Jean, Géraldine and Fertin, Guillaume and Brito, Klairton Lima and Bulteau, Laurent and Dias, Ulisses and Dias, Zanoni},
	date = {2021-11},
	note = {Conference Name: {IEEE}/{ACM} Transactions on Computational Biology and Bioinformatics},
	keywords = {Approximation algorithms, Bioinformatics, Electronic mail, Genome rearrangements, Genomics, Sorting, Time complexity, Transforms, intergenic regions, reversals, signed permutations},
}

@article{oliveira_super_2019,
	title = {Super short operations on both gene order and intergenic sizes},
	volume = {14},
	issn = {1748-7188},
	url = {https://doi.org/10.1186/s13015-019-0156-5},
	doi = {10.1186/s13015-019-0156-5},
	abstract = {The evolutionary distance between two genomes can be estimated by computing a minimum length sequence of operations, called genome rearrangements, that transform one genome into another. Usually, a genome is modeled as an ordered sequence of genes, and most of the studies in the genome rearrangement literature consist in shaping biological scenarios into mathematical models. For instance, allowing different genome rearrangements operations at the same time, adding constraints to these rearrangements (e.g., each rearrangement can affect at most a given number of genes), considering that a rearrangement implies a cost depending on its length rather than a unit cost, etc. Most of the works, however, have overlooked some important features inside genomes, such as the presence of sequences of nucleotides between genes, called intergenic regions.},
	pages = {21},
	number = {1},
	journaltitle = {Algorithms for Molecular Biology},
	shortjournal = {Algorithms for Molecular Biology},
	author = {Oliveira, Andre R. and Jean, Géraldine and Fertin, Guillaume and Dias, Ulisses and Dias, Zanoni},
	urldate = {2023-07-18},
	date = {2019-11-05},
	keywords = {Approximation algorithms, Genome rearrangements, Intergenic regions, Super short operations},
}

@inproceedings{brito_sorting_2019,
	location = {Cham},
	title = {Sorting by Reversals, Transpositions, and Indels on Both Gene Order and Intergenic Sizes},
	isbn = {978-3-030-20242-2},
	doi = {10.1007/978-3-030-20242-2_3},
	series = {Lecture Notes in Computer Science},
	abstract = {During the evolutionary process, the genome is affected by various genome rearrangements, which are events that modify large stretches of the genetic material. In the literature, several models were designed to estimate the number of events that occurred during the evolution, but these models represent genomes as a sequence of genes, overlooking the genetic material between consecutive genes. However, recent studies show that taking into account the genetic material present between consecutive genes can be more realistic. Reversal and transposition are genome rearrangements widely studied in the literature. A reversal inverts a segment of the genome while a transposition swaps the positions of two consecutive segments. Genomes also undergo non-conservative events (events that alter the amount of genetic material) such as insertion and deletion, which insert and remove genetic material from intergenic regions of the genome, respectively. We study problems considering both gene order and intergenic regions size. We investigate the reversal distance between two genomes in two scenarios: with and without non-conservative events. For both problems, we show that they belong to {NP}-hard problems class and we present a 4-approximation algorithm. We also study the reversal and transposition distance between two genomes (and the variation with non-conservative events) and we present a 6-approximation algorithm.},
	pages = {28--39},
	booktitle = {Bioinformatics Research and Applications},
	publisher = {Springer International Publishing},
	author = {Brito, Klairton Lima and Jean, Géraldine and Fertin, Guillaume and Oliveira, Andre Rodrigues and Dias, Ulisses and Dias, Zanoni},
	editor = {Cai, Zhipeng and Skums, Pavel and Li, Min},
	date = {2019},
	langid = {english},
	keywords = {Approximation algorithms, Genome rearrangements, Intergenic regions},
}

@inproceedings{brito_sorting_2020,
	location = {Cham},
	title = {Sorting by Reversals and Transpositions with Proportion Restriction},
	isbn = {978-3-030-65775-8},
	doi = {10.1007/978-3-030-65775-8_11},
	series = {Lecture Notes in Computer Science},
	abstract = {In the field of comparative genomics, one way of comparing two genomes is through the analysis of how they distinguish themselves based on a set of mutations called rearrangement events. When considering that genomes undergo different types of rearrangements, it can be assumed that some events are more common than others. To model this assumption one can assign different weights to different events, where more common events tend to cost less than others. However, this approach, called weighted, does not guarantee that the rearrangement assumed to be the most frequent will be also the most frequently returned by proposed algorithms. To overcome this issue, we investigate a new problem where we seek the shortest sequence of rearrangement events able to transform one genome into the other, with a restriction regarding the proportion between the events returned. Here we consider two rearrangement events: reversal, that inverts the order and the orientation of the genes inside a segment of the genome, and transposition, that moves a segment of the genome to another position. We present an approximation algorithm applicable to any desired proportion, for both scenarios where the orientation of the genes is known or unknown. We also show an improved (asymptotic) approximation algorithm for the case where the gene orientation is known.},
	pages = {117--128},
	booktitle = {Advances in Bioinformatics and Computational Biology},
	publisher = {Springer International Publishing},
	author = {Brito, Klairton Lima and Alexandrino, Alexsandro Oliveira and Oliveira, Andre Rodrigues and Dias, Ulisses and Dias, Zanoni},
	editor = {Setubal, João C. and Silva, Waldeyr Mendes},
	date = {2020},
	langid = {english},
	keywords = {Approximation algorithm, Proportion restriction, Rearrangement events},
}

@inproceedings{pinheiro_heuristics_2020,
	location = {Cham},
	title = {Heuristics for Breakpoint Graph Decomposition with Applications in Genome Rearrangement Problems},
	isbn = {978-3-030-65775-8},
	doi = {10.1007/978-3-030-65775-8_12},
	series = {Lecture Notes in Computer Science},
	abstract = {The breakpoint graph of a permutation is a well-known structure used in genome rearrangement problems. Most studies use the decomposition of such graph into edge-colored disjoint alternating cycles to develop algorithms for these problems. The goal of the Breakpoint Graph Decomposition ({BGD}) problem is to find a decomposition of the breakpoint graph with maximum number of cycles. For unsigned permutations, which model genomes without information about gene orientation, the {BGD} problem is {NP}-hard. In this work, we developed a greedy and a Tabu Search algorithm which are compared experimentally with the approximation algorithm presented by Lin and Jiang [10]. The experiments revealed that our algorithms find significantly better solutions. Finally, we used our algorithms as part of algorithms for genome rearrangement problems and the distances calculated in this way have largely improved.},
	pages = {129--140},
	booktitle = {Advances in Bioinformatics and Computational Biology},
	publisher = {Springer International Publishing},
	author = {Pinheiro, Pedro Olímpio and Alexandrino, Alexsandro Oliveira and Oliveira, Andre Rodrigues and de Souza, Cid Carvalho and Dias, Zanoni},
	editor = {Setubal, João C. and Silva, Waldeyr Mendes},
	date = {2020},
	langid = {english},
	keywords = {Breakpoint graph, Genome rearrangements, Maximum cycle decomposition},
}

@inproceedings{oliveira_35-approximation_2020,
	location = {Cham},
	title = {A 3.5-Approximation Algorithm for Sorting by Intergenic Transpositions},
	isbn = {978-3-030-42266-0},
	doi = {10.1007/978-3-030-42266-0_2},
	series = {Lecture Notes in Computer Science},
	abstract = {Genome Rearrangements affect large stretches of genomes during evolution. One of the most studied genome rearrangement is the transposition, which occurs when a sequence of genes is moved to another position inside the genome. Mathematical models have been used to estimate the evolutionary distance between two different genomes based on genome rearrangements. However, many of these models have focused only on the (order of the) genes of a genome, disregarding other important elements in it. Recently, researchers have shown that considering existing regions between each pair of genes, called intergenic regions, can enhance the distance estimation in realistic data. In this work, we study the transposition distance between two genomes, but we also consider intergenic regions, a problem we name Sorting Permutations by Intergenic Transpositions ({SbIT}). We show that this problem is {NP}-hard and propose a 3.5-approximation algorithm for it.},
	pages = {16--28},
	booktitle = {Algorithms for Computational Biology},
	publisher = {Springer International Publishing},
	author = {Oliveira, Andre Rodrigues and Jean, Géraldine and Fertin, Guillaume and Brito, Klairton Lima and Dias, Ulisses and Dias, Zanoni},
	editor = {Martín-Vide, Carlos and Vega-Rodríguez, Miguel A. and Wheeler, Travis},
	date = {2020},
	langid = {english},
	keywords = {Approximation algorithm, Genome rearrangements, Intergenic regions, Transpositions},
}

@article{oliveira_sorting_2021-1,
	title = {Sorting Permutations by Intergenic Operations},
	volume = {18},
	issn = {1557-9964},
	doi = {10.1109/TCBB.2021.3077418},
	abstract = {Genome Rearrangements are events that affect large stretches of genomes during evolution. Many mathematical models have been used to estimate the evolutionary distance between two genomes based on genome rearrangements. However, most of them focused on the (order of the) genes of a genome, disregarding other important elements in it. Recently, researchers have shown that considering regions between each pair of genes, called intergenic regions, can enhance distance estimation in realistic data. Two of the most studied genome rearrangements are the reversal, which inverts a sequence of genes, and the transposition, which occurs when two adjacent gene sequences swap their positions inside the genome. In this work, we study the transposition distance between two genomes, but we also consider intergenic regions, a problem we name Sorting by Intergenic Transpositions. We show that this problem is {NP}-hard and propose two approximation algorithms, with factors 3.5 and 2.5, considering two distinct definitions for the problem. We also investigate the signed reversal and transposition distance between two genomes considering their intergenic regions. This second problem is called Sorting by Signed Intergenic Reversals and Intergenic Transpositions. We show that this problem is {NP}-hard and develop two approximation algorithms, with factors 3 and 2.5. We check how these algorithms behave when assigning weights for genome rearrangements. Finally, we implemented all these algorithms and tested them on real and simulated data.},
	pages = {2080--2093},
	number = {6},
	journaltitle = {{IEEE}/{ACM} Transactions on Computational Biology and Bioinformatics},
	author = {Oliveira, Andre Rodrigues and Jean, Géraldine and Fertin, Guillaume and Brito, Klairton Lima and Dias, Ulisses and Dias, Zanoni},
	date = {2021-11},
	note = {Conference Name: {IEEE}/{ACM} Transactions on Computational Biology and Bioinformatics},
	keywords = {Approximation algorithms, Bioinformatics, {DNA}, Genome rearrangements, Genomics, Phylogeny, Sorting, Transforms, intergenic regions, reversals, transpositions},
}

@article{brito_improved_2021,
	title = {An improved approximation algorithm for the reversal and transposition distance considering gene order and intergenic sizes},
	volume = {16},
	issn = {1748-7188},
	url = {https://doi.org/10.1186/s13015-021-00203-7},
	doi = {10.1186/s13015-021-00203-7},
	abstract = {In the comparative genomics field, one of the goals is to estimate a sequence of genetic changes capable of transforming a genome into another. Genome rearrangement events are mutations that can alter the genetic content or the arrangement of elements from the genome. Reversal and transposition are two of the most studied genome rearrangement events. A reversal inverts a segment of a genome while a transposition swaps two consecutive segments. Initial studies in the area considered only the order of the genes. Recent works have incorporated other genetic information in the model. In particular, the information regarding the size of intergenic regions, which are structures between each pair of genes and in the extremities of a linear genome.},
	pages = {24},
	number = {1},
	journaltitle = {Algorithms for Molecular Biology},
	shortjournal = {Algorithms for Molecular Biology},
	author = {Brito, Klairton L. and Oliveira, Andre R. and Alexandrino, Alexsandro O. and Dias, Ulisses and Dias, Zanoni},
	urldate = {2023-07-18},
	date = {2021-12-29},
	keywords = {Approximation algorithms, Genome rearrangement events, Intergenic regions},
}

@inproceedings{brito_reversals_2021,
	location = {Cham},
	title = {Reversals Distance Considering Flexible Intergenic Regions Sizes},
	isbn = {978-3-030-74432-8},
	doi = {10.1007/978-3-030-74432-8_10},
	series = {Lecture Notes in Computer Science},
	abstract = {Most mathematical models for genome rearrangement problems have considered only gene order. In this way, the rearrangement distance considering some set of events, such as reversal events, is commonly defined as the minimum number of rearrangement events that transform the gene order from a genome \$\${\textbackslash}mathcal \{G\}\_1\$\$G1into the gene order from a genome \$\${\textbackslash}mathcal \{G\}\_2\$\$G2. Recent works initiate incorporating more information such as the sizes of the intergenic regions (i.e., number of nucleotides between pairs of consecutive genes), which yields good results for estimated distances on realistic data. In these models, besides transforming the gene order, the sequence of rearrangement events must transform the list of intergenic regions sizes from \$\${\textbackslash}mathcal \{G\}\_1\$\$G1into the list of intergenic regions sizes from \$\${\textbackslash}mathcal \{G\}\_2\$\$G2(target list). We study a new variation where each value from the target list is flexible, in the sense that each target intergenic region size is a range of acceptable values. We consider the well-known reversals distance and present a 2-approximation algorithm, alongside {NP}-hardness proof. Our results rely on the Flexible Weighted Cycle Graph, adapted from the breakpoint graph to deal with flexible intergenic regions sizes.},
	pages = {134--145},
	booktitle = {Algorithms for Computational Biology},
	publisher = {Springer International Publishing},
	author = {Brito, Klairton Lima and Alexandrino, Alexsandro Oliveira and Oliveira, Andre Rodrigues and Dias, Ulisses and Dias, Zanoni},
	editor = {Martín-Vide, Carlos and Vega-Rodríguez, Miguel A. and Wheeler, Travis},
	date = {2021},
	langid = {english},
	keywords = {Genome rearrangements, Intergenic regions, Reversals distance},
}

@inproceedings{alexandrino_reversal_2021,
	location = {Cham},
	title = {Reversal Distance on Genomes with Different Gene Content and Intergenic Regions Information},
	isbn = {978-3-030-74432-8},
	doi = {10.1007/978-3-030-74432-8_9},
	series = {Lecture Notes in Computer Science},
	abstract = {Recent works on genome rearrangements have shown that incorporating intergenic region information along with gene order in models provides better estimations for the rearrangement distance than using gene order alone. The reversal distance is one of the main problems in genome rearrangements. It has a polynomial time algorithm when only gene order is used to model genomes, assuming that repeated genes do not exist and that gene orientation is known, even when the genomes have distinct gene sets. The reversal distance is {NP}-hard and has a 2-approximation algorithm when incorporating intergenic regions. However, the problem has only been studied assuming genomes with the same set of genes. In this work, we consider the variation that incorporates intergenic regions and that allows genomes to have distinct sets of genes, a scenario that leads us to include indels operations (insertions and deletions). We present a 3-approximation algorithm using the labeled intergenic breakpoint graph, which is based on the well-known breakpoint graph structure.},
	pages = {121--133},
	booktitle = {Algorithms for Computational Biology},
	publisher = {Springer International Publishing},
	author = {Alexandrino, Alexsandro Oliveira and Brito, Klairton Lima and Oliveira, Andre Rodrigues and Dias, Ulisses and Dias, Zanoni},
	editor = {Martín-Vide, Carlos and Vega-Rodríguez, Miguel A. and Wheeler, Travis},
	date = {2021},
	langid = {english},
	keywords = {Genome rearrangements, Indels, Intergenic regions, Reversals},
}
